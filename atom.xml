<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AngelDevil</title>
  <subtitle>Focus on Android</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.angeldevil.me/"/>
  <updated>2018-11-09T10:10:02.569Z</updated>
  <id>http://www.angeldevil.me/</id>
  
  <author>
    <name>AngelDevil</name>
    <email>angeldeviljy@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ViewPager, CoordinatorLayout与RecyclerView一起使用时滑动的Bug</title>
    <link href="http://www.angeldevil.me/2018/11/09/ViewPager-CoordinatorLayout%E4%B8%8ERecyclerView%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8%E6%97%B6%E6%BB%91%E5%8A%A8%E7%9A%84Bug/"/>
    <id>http://www.angeldevil.me/2018/11/09/ViewPager-CoordinatorLayout与RecyclerView一起使用时滑动的Bug/</id>
    <published>2018-11-09T10:08:47.000Z</published>
    <updated>2018-11-09T10:10:02.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>假设一个页面而已是这样的</p>
<pre>
          ViewPager
              |
Fragment  Fragment    Fragment
              |
       CoordinatorLayout
              |
         RecyclerView
</pre>

<p>向上滑动一点RecyclerView，然后再快速下拉，让RecyclerView快速fling到顶部，到顶部后RecyclerView会停止滚动，这时马上左右滑，会发现ViewPager无法左右滑动，要等2-3秒，或手指触摸一下屏幕后，ViewPager才可以响应左右滑动。</p>
<p>如果RecyclerView外部没有NestedScrollingParent或RecyclerView禁用了NestedScroll就没问题。</p>
<a id="more"></a>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>RecyclerView滑动到顶部后，虽然滑动已经停止了，但其实内部的状态还是STATE_SETTING，而不是STATE_IDLE，所以下次的TouchEvent会直接给RecyclerView。</p>
<p>因为fling时RecyclerView并不知道最终能fling多久，所以是尝试性质的，没有NestedScroll时，RecyclerView判断到某次没滑动了就直接自己终止了滑动事件，回到STATE_IDLE状态。而外部有嵌套NestedScrollingParent时，RecyclerView并没有判断外部的滑动有没有结束，所以滑到顶部时没有自己终止滑动。</p>
<p>具体代码就不帖了，看的时间比较久了，懒得再翻一遍了。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>告诉RecyclerView嵌套滑动的状态，继承RecyclerView，重写<code>dispatchNestedScroll</code>方法，外部没滑动时返回fales</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchNestedScroll</span><span class="params">(<span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed, <span class="keyword">int</span> dxUnconsumed,</span></span></div><div class="line">        <span class="keyword">int</span> dyUnconsumed, <span class="keyword">int</span>[] offsetInWindow, <span class="keyword">int</span> type) &#123;</div><div class="line">    <span class="keyword">if</span> (offsetInWindow == <span class="keyword">null</span>) &#123;</div><div class="line">        offsetInWindow = mOffsetInWindow;</div><div class="line">        offsetInWindow[<span class="number">0</span>] = offsetInWindow[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">boolean</span> result = <span class="keyword">super</span>.dispatchNestedScroll(dxConsumed, dyConsumed,</div><div class="line">            dxUnconsumed, dyUnconsumed, offsetInWindow, type);</div><div class="line">    <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">    <span class="keyword">if</span> (result &amp;&amp; (dxConsumed == <span class="number">0</span> &amp;&amp; offsetInWindow[<span class="number">0</span>] == <span class="number">0</span>) &amp;&amp; (dyConsumed == <span class="number">0</span> &amp;&amp; offsetInWindow[<span class="number">1</span>] == <span class="number">0</span>)) &#123;</div><div class="line">        <span class="comment">// consumed == 0表示RecyclerView自己没滚动，offsetInWindow == 0表示要Parent滚动但Parent没滚动</span></div><div class="line">        <span class="comment">// 这种情况下就认为滚动结束了</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt;假设一个页面而已是这样的&lt;/p&gt;
&lt;pre&gt;
          ViewPager
              |
Fragment  Fragment    Fragment
              |
       CoordinatorLayout
              |
         RecyclerView
&lt;/pre&gt;

&lt;p&gt;向上滑动一点RecyclerView，然后再快速下拉，让RecyclerView快速fling到顶部，到顶部后RecyclerView会停止滚动，这时马上左右滑，会发现ViewPager无法左右滑动，要等2-3秒，或手指触摸一下屏幕后，ViewPager才可以响应左右滑动。&lt;/p&gt;
&lt;p&gt;如果RecyclerView外部没有NestedScrollingParent或RecyclerView禁用了NestedScroll就没问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Glide源码导读</title>
    <link href="http://www.angeldevil.me/2016/09/05/glide/"/>
    <id>http://www.angeldevil.me/2016/09/05/glide/</id>
    <published>2016-09-05T04:28:33.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近比较无聊，为了找点事干，就花了两天时间把Glide的源码大概看了一下。刚开始看Glide的源码头脑还是比较乱的，因为作者引入了几个概念，又大量用了泛型，如果不了解这些概念读起代码来就比较痛苦，我也没有详细看各种实现细节的东西，只是了解了下这个框架的大概样子，在这篇文章里，我会介绍下Glide中的一些关键概念，并走一遍图片加载流程，如果你要阅读Glide源码的话，应该多少会有点帮助。</p>
<a id="more"></a>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>首先是三个最基本的概念：<code>Model</code>, <code>Data</code>和<code>Resource</code>。</p>
<p>想一下，我们加载图片需要什么？一般是一个url，但url并不是所有情况，还有资源ID，文件等等，甚至可以是Feed流中的一条Feed，虽然一般我们会从Feed中取出图片的url来转换为从url中加载的情况，Glide把这些抽像为了一个概念，就是<code>Model</code>，所以<code>Model</code>就是数据地址的最初来源。</p>
<p><code>Model</code>并不能直接解析为图片，比如一个url，是要转换为网络流的InputStream才能被解析为图片的，<code>Model</code>需要进行一次转换才能做为数据解析的数据源，这些转换后的东西就叫做<code>Data</code>，Glide并没有一个Data类，但有很多和它相关的概念，如dataClase，DataFetcher等。</p>
<p>那么<code>Resource</code>呢，其实它就是一个包装类，一个wrapper，它wrap一个对象，使这个对象可以通过对象池进行缓存与重用。</p>
<p>这三个基本概念介绍完了，接下来看一下Glide基本框架。</p>
<p>做为一个图片加载框架，肯定会包含缓存部分。</p>
<p>可以从网上很容易的了解到，Glide的磁盘缓存可以缓存原始数据，也可以缓存处理过的数据。什么意思呢，就是你有一张1000x1000的图片，但你是在列表中展示的，比如是200x200，那么缓存时可以直接将整个网络流缓存下来，即1000x1000的图片，要展示的时候再缩放，但这就降低了展示效率，所以Glide也可以把处理过的200x200的图片缓存起来，增加了缓存大小，但优化了展示速度。</p>
<p>至于怎么把数据缓存到磁盘，就引入了一个叫<code>Encoder</code>的概念，<code>Encoder</code>是用来持久化数据的。</p>
<p>但看源码时你会发现，Glide中有一个类叫<code>Registry</code>，可以注册多个<code>Encoder</code>，但你会发现它还可以注册<code>ResourceEncoder</code>。这两个<code>Encoder</code>很容易引起混淆，而其实<code>ResouseEncoder</code>继承自<code>Encoder</code>。<code>Encoder</code>是用来持久化<code>Data</code>的，<code>ResourceEncoder</code>是用来持久化<code>Resource</code>的。看Glide默认注册的<code>Encoder</code>就知道了，默认注册的<code>Encoder</code>为<code>ByteBuffer</code>和<code>InputStream</code>，而<code>ResourceEncoder</code>是<code>Bitmap</code>、<code>BitmapDrawable</code>和<code>GifDrawable</code>，也就是一个持久化原始数据，一个持久化处理过的数据。我感觉把<code>Encoder</code>做为一个上级的抽象，引入一个和<code>ResourceEncoder</code>同级的<code>DataEncoder</code>就好理解了，正好和前面的基本概念<code>Data</code>和<code>Resource</code>对应。</p>
<p>有<code>Encoder</code>就有<code>Decoder</code>，对应的类叫<code>ResourceDecoder</code>，用来将数据（InputStream等）解析为<code>Resource</code>。</p>
<p>图片加载出来后还可能会应用各种变换，如圆角图片，圆形图片，处理这部分工作的叫<code>Transformation</code></p>
<p>基础概念介绍的差不多了，加载流程也差不多出来了：</p>
<p><img src="sequence1.png" alt="sequence1"></p>
<p>但我们发现前面的介绍中少了一环，即：Glide是怎么把<code>Model</code>转换为<code>Data</code>的。这就引入另一个概念，<code>ModelLoader</code>，就是把<code>Model</code>转换成<code>Data</code>的，为了方便说明，直接把这个类的代码贴上来了，去掉了一些注释。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* A factory interface for translating an arbitrarily complex data model into a concrete data type</div><div class="line">* that can be used by an &#123;<span class="doctag">@link</span> DataFetcher&#125; to obtain the data for a resource represented by the</div><div class="line">* model.</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> &lt;Model&gt; The type of the model.</div><div class="line">* <span class="doctag">@param</span> &lt;Data&gt;  The type of the data that can be used by a</div><div class="line">* &#123;<span class="doctag">@link</span> com.bumptech.glide.load.ResourceDecoder&#125; to decode a resource.</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ModelLoader</span>&lt;<span class="title">Model</span>, <span class="title">Data</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line">  * Contains a set of &#123;<span class="doctag">@link</span> com.bumptech.glide.load.Key Keys&#125; identifying the source of the load,</div><div class="line">  * alternate cache keys pointing to equivalent data, and a</div><div class="line">  * &#123;<span class="doctag">@link</span> com.bumptech.glide.load.data.DataFetcher&#125; that can be used to fetch data not found in</div><div class="line">  * cache.</div><div class="line">  *</div><div class="line">  * <span class="doctag">@param</span> &lt;Data&gt; The type of data that well be loaded.</div><div class="line">  */</div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">LoadData</span>&lt;<span class="title">Data</span>&gt; </span>&#123;</div><div class="line">   <span class="keyword">public</span> <span class="keyword">final</span> Key sourceKey;</div><div class="line">   <span class="keyword">public</span> <span class="keyword">final</span> List&lt;Key&gt; alternateKeys;</div><div class="line">   <span class="keyword">public</span> <span class="keyword">final</span> DataFetcher&lt;Data&gt; fetcher;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LoadData</span><span class="params">(Key sourceKey, DataFetcher&lt;Data&gt; fetcher)</span> </span>&#123;</div><div class="line">     <span class="keyword">this</span>(sourceKey, Collections.&lt;Key&gt;emptyList(), fetcher);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LoadData</span><span class="params">(Key sourceKey, List&lt;Key&gt; alternateKeys, DataFetcher&lt;Data&gt; fetcher)</span> </span>&#123;</div><div class="line">     <span class="keyword">this</span>.sourceKey = Preconditions.checkNotNull(sourceKey);</div><div class="line">     <span class="keyword">this</span>.alternateKeys = Preconditions.checkNotNull(alternateKeys);</div><div class="line">     <span class="keyword">this</span>.fetcher = Preconditions.checkNotNull(fetcher);</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function">LoadData&lt;Data&gt; <span class="title">buildLoadData</span><span class="params">(Model model, <span class="keyword">int</span> width, <span class="keyword">int</span> height, Options options)</span></span>;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">boolean</span> <span class="title">handles</span><span class="params">(Model model)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ModelLoader</code>有两个方法，一个<code>handles</code>表示是否可以处理这个类型的<code>Model</code>，如果可以的话就可以通过<code>buildLoadData</code>生成一个<code>LoadData</code>，而<code>LoadData</code>包含了要用来做缓存的key，及用来获取数据的<code>DataFetcher</code>。</p>
<p>到这里，整个加载流程就清楚了：</p>
<p><img src="sequence2.png" alt="sequence2"></p>
<h1 id="基本加载流程"><a href="#基本加载流程" class="headerlink" title="基本加载流程"></a>基本加载流程</h1><p>接下来要做的就是根据我们的使用方法走一遍流程，调用如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Glide.with(mContext)</div><div class="line">    .load(url)</div><div class="line">    .apply(RequestOptions.placeholderOf(R.drawable.loading))</div><div class="line">    .into(myImageView);</div></pre></td></tr></table></figure>
<p>一步步看，先是<code>Glide.with(mContext)</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RequestManager <span class="title">with</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line"> RequestManagerRetriever retriever = RequestManagerRetriever.get();</div><div class="line"> <span class="keyword">return</span> retriever.get(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过<code>RequestManagerRetriever</code>获取到了一个<code>RequestManager</code>，至于为什么还需要一个<code>RequestManagerRetriever</code>并有各种重载方法，主要是因为Glide通过<code>SupportRequestManagerFragment</code>和<code>RequestManagerFragment</code>关联了Activity或Fragment的生命周期，用来做<code>pauseRequests</code>等操作。</p>
<p>然后是<code>load</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">load</span><span class="params">(@Nullable Object model)</span> </span>&#123;</div><div class="line"> <span class="keyword">return</span> asDrawable().load(model);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; <span class="title">asDrawable</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="keyword">return</span> as(Drawable.class).transition(<span class="keyword">new</span> DrawableTransitionOptions());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> &lt;ResourceType&gt; <span class="function">RequestBuilder&lt;ResourceType&gt; <span class="title">as</span><span class="params">(Class&lt;ResourceType&gt; resourceClass)</span> </span>&#123;</div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> RequestBuilder&lt;&gt;(glide.getGlideContext(), <span class="keyword">this</span>, resourceClass);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是<code>asDrawable.load(model)</code>的缩写，就是说这个Model我是要加载为Drawable的，最终返回一个<code>RequestBuilder</code>，看名字就知道是做什么了，不过这个类主要是设置Thumbnail Request，Transition等个别设置（旧版本中placeHolder等也是在这里设置的），大部分设置在<code>RequestOptions</code>里，这就是下面这一句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply(RequestOptions.placeholderOf(R.drawable.loading))</div></pre></td></tr></table></figure>
<p>应用一个<code>RequestOptions</code>，<code>RequestOptions</code>可以设置各种请求相关的选项，如占位图片，加载失败的图片，缓存策略等。<code>RequestOptions</code>继承自<code>BaseRequestOptions</code>，但全是工厂方法生成各种RequestOptions。</p>
<p>最后就是<code>into</code>了，把图片加载到一个<code>Target</code>中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Target&lt;TranscodeType&gt; <span class="title">into</span><span class="params">(ImageView view)</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="keyword">return</span> into(context.buildImageViewTarget(view, transcodeClass));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class="function">Y <span class="title">into</span><span class="params">(@NonNull Y target)</span> </span>&#123;</div><div class="line"> Util.assertMainThread();</div><div class="line"> Preconditions.checkNotNull(target);</div><div class="line"> <span class="keyword">if</span> (!isModelSet) &#123;</div><div class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"You must call #load() before calling #into()"</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> Request previous = target.getRequest();</div><div class="line"></div><div class="line"> <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</div><div class="line">   requestManager.clear(target);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> requestOptions.lock();</div><div class="line"> Request request = buildRequest(target);</div><div class="line"> target.setRequest(request);</div><div class="line"> requestManager.track(target, request);</div><div class="line"></div><div class="line"> <span class="keyword">return</span> target;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Target</code>是要加载到的目标，比如<code>ImageViewTarget</code>，<code>AppWidgetTarget</code>，在这里我们传进来了一个<code>ImageView</code>，内部生成了一个<code>DrawableImageViewTarget</code>。这里最主要的操作是<code>buildRequest</code>然后交给<code>RequestManager</code>去<code>track</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">track</span><span class="params">(Target&lt;?&gt; target, Request request)</span> </span>&#123;</div><div class="line"> targetTracker.track(target);</div><div class="line"> requestTracker.runRequest(request);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// RequestTracker</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runRequest</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line"> requests.add(request);</div><div class="line"> <span class="keyword">if</span> (!isPaused) &#123;</div><div class="line">   request.begin();</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line">   pendingRequests.add(request);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>TargetTracker</code>主要就是记录一下所有正在加载的图片的<code>Target</code>，所以加载行为是在<code>RequestTracker.runRequest</code>中的，<code>runRequest</code>先判断是否是pause状态（RequestManager设置），如果不是就直接调用<code>Request.begin</code>触发加载，否则就回到pending队列里等待resume。</p>
<p>除了设置缩略图的情景，使用的<code>Request</code>都是<code>SingleRequest</code>，看一下它的<code>begin</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span> </span>&#123;</div><div class="line"> stateVerifier.throwIfRecycled();</div><div class="line"> startTime = LogTime.getLogTime();</div><div class="line"> <span class="keyword">if</span> (model == <span class="keyword">null</span>) &#123;</div><div class="line">   <span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</div><div class="line">     width = overrideWidth;</div><div class="line">     height = overrideHeight;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// Only log at more verbose log levels if the user has set a fallback drawable, because</span></div><div class="line">   <span class="comment">// fallback Drawables indicate the user expects null models occasionally.</span></div><div class="line">   <span class="keyword">int</span> logLevel = getFallbackDrawable() == <span class="keyword">null</span> ? Log.WARN : Log.DEBUG;</div><div class="line">   onLoadFailed(<span class="keyword">new</span> GlideException(<span class="string">"Received null model"</span>), logLevel);</div><div class="line">   <span class="keyword">return</span>;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> status = Status.WAITING_FOR_SIZE;</div><div class="line"> <span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</div><div class="line">   onSizeReady(overrideWidth, overrideHeight);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line">   target.getSize(<span class="keyword">this</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">if</span> ((status == Status.RUNNING || status == Status.WAITING_FOR_SIZE)</div><div class="line">     &amp;&amp; canNotifyStatusChanged()) &#123;</div><div class="line">   target.onLoadStarted(getPlaceholderDrawable());</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">   logV(<span class="string">"finished run method in "</span> + LogTime.getElapsedMillis(startTime));</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加载逻辑是这几行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</div><div class="line">  onSizeReady(overrideWidth, overrideHeight);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  target.getSize(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>判断下是否知道<code>Target</code>的大小，如果大小已知就调用<code>onSizeReady</code>，否则就调用<code>target.getSize</code>获取它的大小，当成功获取到大小后，会通过回调继续调用<code>onSizeReady</code>，所以整个加载方法都是在<code>onSizeReady</code>里的。至于<code>Target</code>怎么获取它的大小，那要看它的实现了，对于<code>ImageViewTarget</code>，是通过<code>ViewTreeObserver.OnPreDrawListener</code>等到View要测绘的时候就知道它的大小了。</p>
<p><code>onSizeReady</code>就是把操作转移到了<code>Engine.load</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;R&gt; <span class="function">LoadStatus <span class="title">load</span><span class="params">(</span></span></div><div class="line">   GlideContext glideContext,</div><div class="line">   Object model,</div><div class="line">   Key signature,</div><div class="line">   <span class="keyword">int</span> width,</div><div class="line">   <span class="keyword">int</span> height,</div><div class="line">   Class&lt;?&gt; resourceClass,</div><div class="line">   Class&lt;R&gt; transcodeClass,</div><div class="line">   Priority priority,</div><div class="line">   DiskCacheStrategy diskCacheStrategy,</div><div class="line">   Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,</div><div class="line">   <span class="keyword">boolean</span> isTransformationRequired,</div><div class="line">   Options options,</div><div class="line">   <span class="keyword">boolean</span> isMemoryCacheable,</div><div class="line">   <span class="keyword">boolean</span> useUnlimitedSourceExecutorPool,</div><div class="line">   ResourceCallback cb) &#123;</div><div class="line"> Util.assertMainThread();</div><div class="line"> <span class="keyword">long</span> startTime = LogTime.getLogTime();</div><div class="line"></div><div class="line"> EngineKey key = keyFactory.buildKey(model, signature, width, height, transformations,</div><div class="line">     resourceClass, transcodeClass, options);</div><div class="line"></div><div class="line"> EngineResource&lt;?&gt; cached = loadFromCache(key, isMemoryCacheable);</div><div class="line"> <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</div><div class="line">   cb.onResourceReady(cached, DataSource.MEMORY_CACHE);</div><div class="line">   <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">     logWithTimeAndKey(<span class="string">"Loaded resource from cache"</span>, startTime, key);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> EngineResource&lt;?&gt; active = loadFromActiveResources(key, isMemoryCacheable);</div><div class="line"> <span class="keyword">if</span> (active != <span class="keyword">null</span>) &#123;</div><div class="line">   cb.onResourceReady(active, DataSource.MEMORY_CACHE);</div><div class="line">   <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">     logWithTimeAndKey(<span class="string">"Loaded resource from active resources"</span>, startTime, key);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> EngineJob&lt;?&gt; current = jobs.get(key);</div><div class="line"> <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">   current.addCallback(cb);</div><div class="line">   <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">     logWithTimeAndKey(<span class="string">"Added to existing load"</span>, startTime, key);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, current);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> EngineJob&lt;R&gt; engineJob = engineJobFactory.build(key, isMemoryCacheable,</div><div class="line">     useUnlimitedSourceExecutorPool);</div><div class="line"> DecodeJob&lt;R&gt; decodeJob = decodeJobFactory.build(</div><div class="line">     glideContext,</div><div class="line">     model,</div><div class="line">     key,</div><div class="line">     signature,</div><div class="line">     width,</div><div class="line">     height,</div><div class="line">     resourceClass,</div><div class="line">     transcodeClass,</div><div class="line">     priority,</div><div class="line">     diskCacheStrategy,</div><div class="line">     transformations,</div><div class="line">     isTransformationRequired,</div><div class="line">     options,</div><div class="line">     engineJob);</div><div class="line"> jobs.put(key, engineJob);</div><div class="line"> engineJob.addCallback(cb);</div><div class="line"> engineJob.start(decodeJob);</div><div class="line"></div><div class="line"> <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">   logWithTimeAndKey(<span class="string">"Started new load"</span>, startTime, key);</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, engineJob);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>Engine.load</code>中，先<code>loadFromCache</code>，如果缓存没有命中就再<code>loadFromActiveResources</code>，这是两级内存缓存，第一级是LruCache，第二级是ActiveCache，主要作用是，有可能一个图片很早就被加载了，可能已经从LruCache被移除掉了，但这个图片可能还在被某一个地方引用着，也就是还是Active的，那它就可能在将来仍被引用到，所以就把它保留在二级的ActiveCache中，ActiveCache中是以弱引用引用图片的，并通过<code>ReferenceQueue</code>监测弱引用的回收，然后用<code>Handler.IdleHandler</code>在CPU空闲时被被回收的引用项从ActiveCache中移除。</p>
<p>接下来看对应的Key是否已经正在加载，如果是的话，就<code>addCallback</code>，这样如果有多个地方同时请求同一张图片的话，只会生成一个加载任务，并都能收到回调，这点是比Universal-Image-Loader好的地方。</p>
<p>正常的加载流程是生成一个<code>EngineJob</code>和一个<code>DecodeJob</code>，通过<code>engineJob.start(decodeJob)</code>来进行实际的加载。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(DecodeJob&lt;R&gt; decodeJob)</span> </span>&#123;</div><div class="line"> <span class="keyword">this</span>.decodeJob = decodeJob;</div><div class="line"> GlideExecutor executor = decodeJob.willDecodeFromCache()</div><div class="line">     ? diskCacheExecutor</div><div class="line">     : getActiveSourceExecutor();</div><div class="line"> executor.execute(decodeJob);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>EngineJob.start</code>直接将<code>DecodeJob</code>交给Executor去执行了（<code>DecodeJob</code>实现了<code>Runnable</code>接口）。<code>DecodeJob</code>的加载操作放到了<code>runWrapped</code>中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runWrapped</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (runReason) &#123;</div><div class="line">   <span class="keyword">case</span> INITIALIZE:</div><div class="line">     stage = getNextStage(Stage.INITIALIZE);</div><div class="line">     currentGenerator = getNextGenerator();</div><div class="line">     runGenerators();</div><div class="line">     <span class="keyword">break</span>;</div><div class="line">   <span class="keyword">case</span> SWITCH_TO_SOURCE_SERVICE:</div><div class="line">     runGenerators();</div><div class="line">     <span class="keyword">break</span>;</div><div class="line">   <span class="keyword">case</span> DECODE_DATA:</div><div class="line">     decodeFromRetrievedData();</div><div class="line">     <span class="keyword">break</span>;</div><div class="line">   <span class="keyword">default</span>:</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unrecognized run reason: "</span> + runReason);</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> DataFetcherGenerator <span class="title">getNextGenerator</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="keyword">switch</span> (stage) &#123;</div><div class="line">   <span class="keyword">case</span> RESOURCE_CACHE:</div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> ResourceCacheGenerator(decodeHelper, <span class="keyword">this</span>);</div><div class="line">   <span class="keyword">case</span> DATA_CACHE:</div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> DataCacheGenerator(decodeHelper, <span class="keyword">this</span>);</div><div class="line">   <span class="keyword">case</span> SOURCE:</div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> SourceGenerator(decodeHelper, <span class="keyword">this</span>);</div><div class="line">   <span class="keyword">case</span> FINISHED:</div><div class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   <span class="keyword">default</span>:</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unrecognized stage: "</span> + stage);</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Stage <span class="title">getNextStage</span><span class="params">(Stage current)</span> </span>&#123;</div><div class="line"> <span class="keyword">switch</span> (current) &#123;</div><div class="line">   <span class="keyword">case</span> INITIALIZE:</div><div class="line">     <span class="keyword">return</span> diskCacheStrategy.decodeCachedResource()</div><div class="line">         ? Stage.RESOURCE_CACHE : getNextStage(Stage.RESOURCE_CACHE);</div><div class="line">   <span class="keyword">case</span> RESOURCE_CACHE:</div><div class="line">     <span class="keyword">return</span> diskCacheStrategy.decodeCachedData()</div><div class="line">         ? Stage.DATA_CACHE : getNextStage(Stage.DATA_CACHE);</div><div class="line">   <span class="keyword">case</span> DATA_CACHE:</div><div class="line">     <span class="keyword">return</span> Stage.SOURCE;</div><div class="line">   <span class="keyword">case</span> SOURCE:</div><div class="line">   <span class="keyword">case</span> FINISHED:</div><div class="line">     <span class="keyword">return</span> Stage.FINISHED;</div><div class="line">   <span class="keyword">default</span>:</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unrecognized stage: "</span> + current);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要加载逻辑就在这三个函数中了：</p>
<ol>
<li>先获取当前的Stage</li>
<li>根据当前的Stage获取相应的Generator，</li>
<li>执行Generator</li>
</ol>
<p>一共有三种Generator：</p>
<ul>
<li><code>ResourceCacheGenerator</code>：从处理过的缓存加载数据</li>
<li><code>DataCacheGenerator</code>：从原始缓存加载数据</li>
<li><code>SourceGenerator</code>：从数据源请求数据，如网络请求</li>
</ul>
<p>前面说过，Glide的磁盘缓存可以选择缓存原始图片，缓存处理过的图片（如列表中显示缩略图时缩放后的图片），这三个Generator就分别对应处理过的图片缓存，原始图片缓存，和数据源加载。</p>
<p>在上面的第三步执行Generator时主要就是调用了Generator，其实就是执行Generator的<code>startNext</code>方法，这里以<code>SourceGenerator</code>为例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startNext</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="keyword">if</span> (dataToCache != <span class="keyword">null</span>) &#123;</div><div class="line">   Object data = dataToCache;</div><div class="line">   dataToCache = <span class="keyword">null</span>;</div><div class="line">   cacheData(data);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">if</span> (sourceCacheGenerator != <span class="keyword">null</span> &amp;&amp; sourceCacheGenerator.startNext()) &#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"> &#125;</div><div class="line"> sourceCacheGenerator = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"> loadData = <span class="keyword">null</span>;</div><div class="line"> <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</div><div class="line"> <span class="keyword">while</span> (!started &amp;&amp; hasNextModelLoader()) &#123;</div><div class="line">   loadData = helper.getLoadData().get(loadDataListIndex++);</div><div class="line">   <span class="keyword">if</span> (loadData != <span class="keyword">null</span></div><div class="line">       &amp;&amp; (helper.getDiskCacheStrategy().isDataCacheable(loadData.fetcher.getDataSource())</div><div class="line">       || helper.hasLoadPath(loadData.fetcher.getDataClass()))) &#123;</div><div class="line">     started = <span class="keyword">true</span>;</div><div class="line">     loadData.fetcher.loadData(helper.getPriority(), <span class="keyword">this</span>);</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> started;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先忽略函数开始时<code>dataToCache</code>和<code>sourceCacheGenerator</code>相关的代码，第一次加载时这两个一定是null的。剩下的流程就是获取一个<code>LoadData</code>，调用<code>LoadData.fetcher.loadData</code>加载数据。看一下<code>LoadData</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">List&lt;LoadData&lt;?&gt;&gt; getLoadData() &#123;</div><div class="line"> <span class="keyword">if</span> (!isLoadDataSet) &#123;</div><div class="line">   isLoadDataSet = <span class="keyword">true</span>;</div><div class="line">   loadData.clear();</div><div class="line">   List&lt;ModelLoader&lt;Object, ?&gt;&gt; modelLoaders = glideContext.getRegistry().getModelLoaders(model);</div><div class="line">   <span class="keyword">int</span> size = modelLoaders.size();</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">     ModelLoader&lt;Object, ?&gt; modelLoader = modelLoaders.get(i);</div><div class="line">     LoadData&lt;?&gt; current =</div><div class="line">         modelLoader.buildLoadData(model, width, height, options);</div><div class="line">     <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">       loadData.add(current);</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> loadData;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>getLoadData</code>中通过获取所有提前注册过的能处理<code>Model</code>类型的<code>ModelLoader</code>，调用它的<code>buildLoadData</code>生成<code>LoadData</code>，最终返回一个<code>LoadData</code>列表。</p>
<p>前面说过<code>LoadData</code>包含了用来获取数据的<code>DataFetcher</code>。<code>SourceGenerator.startNext</code>就调用了<code>loadData.fetcher.loadData</code>来进行加载数据，并传进去一个Callback，就是当前的<code>SourceGenerator</code>，如果加载成功，会调用<code>onDataReady</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDataReady</span><span class="params">(Object data)</span> </span>&#123;</div><div class="line"> DiskCacheStrategy diskCacheStrategy = helper.getDiskCacheStrategy();</div><div class="line"> <span class="keyword">if</span> (data != <span class="keyword">null</span> &amp;&amp; diskCacheStrategy.isDataCacheable(loadData.fetcher.getDataSource())) &#123;</div><div class="line">   dataToCache = data;</div><div class="line">   <span class="comment">// We might be being called back on someone else's thread. Before doing anything, we should</span></div><div class="line">   <span class="comment">// reschedule to get back onto Glide's thread.</span></div><div class="line">   cb.reschedule();</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line">   cb.onDataFetcherReady(loadData.sourceKey, data, loadData.fetcher,</div><div class="line">       loadData.fetcher.getDataSource(), originalKey);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数据加载成功后，如果设置了要进行磁盘缓存，会设置成员变量<code>dataToCache</code>，并调用Callback的<code>reschedule</code>，结果就是会再次调用当前Generator的<code>startNext</code>，<code>startNext</code>的前半部分实现就起作用了，会进行写缓存的操作。</p>
<p>当<code>rescheudle</code>后写了缓存后，或不缓存的情况下，会调用<code>onDataFetcherReady</code>，这个Callback就是前面的<code>DecodeJob</code>，在<code>onDataFetcherReady</code>中会调用<code>decodeFromRetrievedData</code> decode数据，最终调用到<code>decodeFromFetcher</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> &lt;Data&gt; <span class="function">Resource&lt;R&gt; <span class="title">decodeFromFetcher</span><span class="params">(Data data, DataSource dataSource)</span></span></div><div class="line">   <span class="keyword">throws</span> GlideException &#123;</div><div class="line"> LoadPath&lt;Data, ?, R&gt; path = decodeHelper.getLoadPath((Class&lt;Data&gt;) data.getClass());</div><div class="line"> <span class="keyword">return</span> runLoadPath(data, dataSource, path);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取<code>LoadPath</code>，并调用它的<code>load</code>方法。<code>LoadPath</code>就是封装了多个<code>DecodePath</code>，<code>DecodePath</code>用于decode and Transform数据，如InputStream-&gt;Bitmap-&gt;BitmapDrawable，<code>DecodePath</code>中会获取预先注册的<code>Decoder</code>来decode获取到的数据，decode成功后通过回调调用<code>DecodeJob</code>的<code>onResourceDecoded</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Resource&lt;Z&gt; <span class="title">onResourceDecoded</span><span class="params">(Resource&lt;Z&gt; decoded)</span> </span>&#123;</div><div class="line"> Class&lt;Z&gt; resourceSubClass = getResourceClass(decoded);</div><div class="line"> Transformation&lt;Z&gt; appliedTransformation = <span class="keyword">null</span>;</div><div class="line"> Resource&lt;Z&gt; transformed = decoded;</div><div class="line"> <span class="keyword">if</span> (dataSource != DataSource.RESOURCE_DISK_CACHE) &#123;</div><div class="line">   appliedTransformation = decodeHelper.getTransformation(resourceSubClass);</div><div class="line">   transformed = appliedTransformation.transform(decoded, width, height);        <span class="comment">//////////////////////////    1</span></div><div class="line"> &#125;</div><div class="line"> <span class="comment">// <span class="doctag">TODO:</span> Make this the responsibility of the Transformation.</span></div><div class="line"> <span class="keyword">if</span> (!decoded.equals(transformed)) &#123;</div><div class="line">   decoded.recycle();</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">final</span> EncodeStrategy encodeStrategy;</div><div class="line"> <span class="keyword">final</span> ResourceEncoder&lt;Z&gt; encoder;</div><div class="line"> <span class="keyword">if</span> (decodeHelper.isResourceEncoderAvailable(transformed)) &#123;</div><div class="line">   encoder = decodeHelper.getResultEncoder(transformed);</div><div class="line">   encodeStrategy = encoder.getEncodeStrategy(options);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line">   encoder = <span class="keyword">null</span>;</div><div class="line">   encodeStrategy = EncodeStrategy.NONE;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> Resource&lt;Z&gt; result = transformed;</div><div class="line"> <span class="keyword">boolean</span> isFromAlternateCacheKey = !decodeHelper.isSourceKey(currentSourceKey);</div><div class="line"> <span class="keyword">if</span> (diskCacheStrategy.isResourceCacheable(isFromAlternateCacheKey, dataSource,</div><div class="line">     encodeStrategy)) &#123;</div><div class="line">   <span class="keyword">if</span> (encoder == <span class="keyword">null</span>) &#123;</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> Registry.NoResultEncoderAvailableException(transformed.get().getClass());</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">final</span> Key key;</div><div class="line">   <span class="keyword">if</span> (encodeStrategy == EncodeStrategy.SOURCE) &#123;</div><div class="line">     key = <span class="keyword">new</span> DataCacheKey(currentSourceKey, signature);</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (encodeStrategy == EncodeStrategy.TRANSFORMED) &#123;</div><div class="line">     key = <span class="keyword">new</span> ResourceCacheKey(currentSourceKey, signature, width, height,</div><div class="line">         appliedTransformation, resourceSubClass, options);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown strategy: "</span> + encodeStrategy);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   LockedResource&lt;Z&gt; lockedResult = LockedResource.obtain(transformed);</div><div class="line">   deferredEncodeManager.init(key, encoder, lockedResult);           <span class="comment">//////////////////////////    2</span></div><div class="line">   result = lockedResult;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上述代码的注释1处对加载成功的资源应用Transformation，然后在注释2处根据缓存策略初始化<code>DeferredEncodeManager</code>，在前面的<code>decodeFromRetrievedData</code>中，如果有必要会把transform过的资源写缓存。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decodeFromRetrievedData</span><span class="params">()</span> </span>&#123;</div><div class="line">  ...</div><div class="line"></div><div class="line"> <span class="keyword">if</span> (resource != <span class="keyword">null</span>) &#123;</div><div class="line">   notifyEncodeAndRelease(resource, currentDataSource);</div><div class="line"> &#125; <span class="keyword">else</span> &#123;</div><div class="line">   runGenerators();</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>notifyEncodeAndRelease</code>中处理了对处理过的图片的缓存操作。当缓存完成后（如果有需要的话）就通过回调告诉外面加载完成了。至此，整个加载过程完成。</p>
<h1 id="Glide配置"><a href="#Glide配置" class="headerlink" title="Glide配置"></a>Glide配置</h1><p>Glide允许我们进行一定程度的自定义，比如设置自定义的Executor，设置缓存池，设置Log等级等，完成这个任务的类叫<code>GlideBuilder</code>，Glide类在工程中是作为单例使用的，看一下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Glide <span class="title">get</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line"> <span class="keyword">if</span> (glide == <span class="keyword">null</span>) &#123;</div><div class="line">   <span class="keyword">synchronized</span> (Glide.class) &#123;</div><div class="line">     <span class="keyword">if</span> (glide == <span class="keyword">null</span>) &#123;</div><div class="line">       Context applicationContext = context.getApplicationContext();</div><div class="line">       List&lt;GlideModule&gt; modules = <span class="keyword">new</span> ManifestParser(applicationContext).parse();</div><div class="line"></div><div class="line">       GlideBuilder builder = <span class="keyword">new</span> GlideBuilder(applicationContext);</div><div class="line">       <span class="keyword">for</span> (GlideModule <span class="keyword">module</span> : modules) &#123;</div><div class="line">         <span class="keyword">module</span>.applyOptions(applicationContext, builder);</div><div class="line">       &#125;</div><div class="line">       glide = builder.createGlide();</div><div class="line">       <span class="keyword">for</span> (GlideModule <span class="keyword">module</span> : modules) &#123;</div><div class="line">         <span class="keyword">module</span>.registerComponents(applicationContext, glide.registry);</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">return</span> glide;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过<code>GlideBuilder</code>生成了一个<code>Glide</code>实例，我们是没有办法直接配置<code>GlideBuilder</code>的，但我们发现<code>Glide.get</code>解析了Manifest，获取了一个<code>GlideModule</code>的列表，并调用了它的<code>applyOptions</code>和<code>registerComponents</code>方法。以项目中OkHttp的配置为例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpGlideModule</span> <span class="keyword">implements</span> <span class="title">GlideModule</span> </span>&#123;</div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyOptions</span><span class="params">(Context context, GlideBuilder builder)</span> </span>&#123;</div><div class="line">   <span class="comment">// Do nothing.</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(Context context, Registry registry)</span> </span>&#123;</div><div class="line">   registry.replace(GlideUrl.class, InputStream.class, <span class="keyword">new</span> OkHttpUrlLoader.Factory());</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>GlideModule</code>有两个方法，<code>applyOptions</code>，有一个<code>GlideBuilder</code>参数，在这里我们就可以配置Glide了。还有一个<code>registerComponents</code>方法，并有一个<code>Registry</code>参数，通过这个类的实例我们就可以注册我们自定义的<code>ModelLoader</code>，<code>Encoder</code>等基础组件了。</p>
<p>自定义<code>GlideModule</code>是通过Manifest的meta-data标签配置的</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">   <span class="attr">android:name</span>=<span class="string">"com.bumptech.glide.integration.okhttp3.OkHttpGlideModule"</span></div><div class="line">   <span class="attr">android:value</span>=<span class="string">"GlideModule"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p> <a href="http://www.lightskystreet.com/2015/10/12/glide_source_analysis/" target="_blank" rel="external">http://www.lightskystreet.com/2015/10/12/glide_source_analysis/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近比较无聊，为了找点事干，就花了两天时间把Glide的源码大概看了一下。刚开始看Glide的源码头脑还是比较乱的，因为作者引入了几个概念，又大量用了泛型，如果不了解这些概念读起代码来就比较痛苦，我也没有详细看各种实现细节的东西，只是了解了下这个框架的大概样子，在这篇文章里，我会介绍下Glide中的一些关键概念，并走一遍图片加载流程，如果你要阅读Glide源码的话，应该多少会有点帮助。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
      <category term="Glide" scheme="http://www.angeldevil.me/tags/Glide/"/>
    
  </entry>
  
  <entry>
    <title>LinearLayout坑爹的showDividers属性</title>
    <link href="http://www.angeldevil.me/2015/12/29/LinearLayout%E5%9D%91%E7%88%B9%E7%9A%84showDividers%E5%B1%9E%E6%80%A7/"/>
    <id>http://www.angeldevil.me/2015/12/29/LinearLayout坑爹的showDividers属性/</id>
    <published>2015-12-29T05:10:51.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>LinearLayout有个属性叫<code>showDividers</code>，可以用来在LinearLayout的Child之间显示一条分割线，使用起来很是方便，但是，Android啊，总是在开始时感觉有很多方便开发的东西，但使用越久，越发现坑很多。</p>
<a id="more"></a>
<p>下面用一个Demo来说明。</p>
<p>首先新建一个布局文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"angeldevil.me.dividerdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:divider</span>=<span class="string">"@drawable/divider"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:showDividers</span>=<span class="string">"beginning|middle|end"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#22000000"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">            <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Hello World! 1"</span>/&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#22000000"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">            <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Hello World! 2"</span>/&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#22000000"</span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">            <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Hello World! 3"</span></div><div class="line">            <span class="attr">android:visibility</span>=<span class="string">"visible"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"48dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"View outside LinearLayout"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>很简单，就是一个LinearLayout，有3个Child，并设置<code>showDividers=&quot;beginning|middle|bottom&quot;</code>显示一条分割线，为了后面说明问题，还在外层添加了一个LinearLayout，并添加了一个TextView。</p>
<p>divider.xml内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">      <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/colorAccent"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:height</span>=<span class="string">"4dp"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<p>为了方便查看效果，Divider高度定义为了4dp，下面是显示效果。</p>
<p><img src="normal.png" alt=""></p>
<p>一切都很正常，确实很方便，但是，如果你把显示Divider的LinearLayout的最后一项的visibility设置为gone试试，下面是实际效果，测试环境Android 5.1</p>
<p><img src="last_gone.png" alt=""></p>
<p>可以看到，底部的Divider不见了，严格来说，不是不见了，“View outside LinearLayout”与这个LinearLayout的间距还在，只是是透明的，说明系统计算高度时正确地把Divider的高度计算进去了，但却没有draw出来。</p>
<p>那是什么原因呢，我们跟进源码看一下。先看LinearLayout的onMeasuer</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">measureVertical</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">            <span class="keyword">final</span> View child = getVirtualChildAt(i);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">                mTotalLength += measureNullChild(i);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (child.getVisibility() == View.GONE) &#123;</div><div class="line">               i += getChildrenSkipCount(child, i);</div><div class="line">               <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class="line">                mTotalLength += mDividerHeight;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mTotalLength &gt; <span class="number">0</span> &amp;&amp; hasDividerBeforeChildAt(count)) &#123;</div><div class="line">            mTotalLength += mDividerHeight;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">｝</div></pre></td></tr></table></figure>
<p>可以看到，LinearLayout遍历了所有的Child，如果Visibility不为GONE就判断是否需要在它前面添加一个Divider，如果需要，就需要增加一个Divider的高度，因为for循环里判断的是是否需要显示每一个Child之前的Divider，所以end的那一个Divider需要单独判断，就是下面的<code>hasDividerBeforeChildAt(count)</code>，从代码看，measure过程一切正常，从前面的截图也可以看到，高度计算是没有问题的。</p>
<p>既然是绘制不正常，那就继续看下<code>onDraw</code>函数，由于是在5.1下测试的，找下5.1的源码看看</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mDivider == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</div><div class="line">        drawDividersVertical(canvas);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        drawDividersHorizontal(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawDividersVertical</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = getVirtualChildCount();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">final</span> View child = getVirtualChildAt(i);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (child != <span class="keyword">null</span> &amp;&amp; child.getVisibility() != GONE) &#123;</div><div class="line">            <span class="keyword">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class="line">                <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> top = child.getTop() - lp.topMargin - mDividerHeight;</div><div class="line">                drawHorizontalDivider(canvas, top);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (hasDividerBeforeChildAt(count)) &#123;</div><div class="line">        <span class="keyword">final</span> View child = getVirtualChildAt(count - <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> bottom = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">            bottom = getHeight() - getPaddingBottom() - mDividerHeight;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line">            bottom = child.getBottom() + lp.bottomMargin;</div><div class="line">        &#125;</div><div class="line">        drawHorizontalDivider(canvas, bottom);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于只是最后一条分割线画错了，所以我们只需要看<code>drawDividersVertical</code>的最后一个<code>if</code>语句，它的逻辑是，找到最后一个child，并在<code>child.getBottom() + lp.bottomMargin</code>下画一条线。</p>
<p>问题就在这里了，最后一个<strong>Child的Visibility为GONE，所以<code>child.getBottom()</code>结果是0结果就是这条线会画到LinearLayout的顶部，和顶部的Divider重合</strong>。</p>
<p>如果最后一个View的marginBottom不为0，错误就更明显了，如图所示，验证了这段代码的错误逻辑（为了看到这条错误的分割线，故意把TextView的背景带上了透明度）</p>
<p><img src="last_with_margin_gone.png" alt=""></p>
<p>那解决办法是什么呢，也很简单，不要给<code>showDividers</code>属性设置end值，只设置beginning|middle，然后给LinearLayout最后添加个高度为0的空白View这样无论隐藏哪一个Child就都没问题了。</p>
<p>在Android 6.0上已经修复了这一问题，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawDividersVertical</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> count = getVirtualChildCount();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">final</span> View child = getVirtualChildAt(i);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (child != <span class="keyword">null</span> &amp;&amp; child.getVisibility() != GONE) &#123;</div><div class="line">            <span class="keyword">if</span> (hasDividerBeforeChildAt(i)) &#123;</div><div class="line">                <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> top = child.getTop() - lp.topMargin - mDividerHeight;</div><div class="line">                drawHorizontalDivider(canvas, top);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (hasDividerBeforeChildAt(count)) &#123;</div><div class="line">        <span class="keyword">final</span> View child = getLastNonGoneChild();</div><div class="line">        <span class="keyword">int</span> bottom = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</div><div class="line">            bottom = getHeight() - getPaddingBottom() - mDividerHeight;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">final</span> LayoutParams lp = (LayoutParams) child.getLayoutParams();</div><div class="line">            bottom = child.getBottom() + lp.bottomMargin;</div><div class="line">        &#125;</div><div class="line">        drawHorizontalDivider(canvas, bottom);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>画最后一条分割线时已经不再是画到最后一个Child的下面，而是画到最后一个Visibility不为GONE的Child的下面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LinearLayout有个属性叫&lt;code&gt;showDividers&lt;/code&gt;，可以用来在LinearLayout的Child之间显示一条分割线，使用起来很是方便，但是，Android啊，总是在开始时感觉有很多方便开发的东西，但使用越久，越发现坑很多。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
      <category term="LinearLayout" scheme="http://www.angeldevil.me/tags/LinearLayout/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView smoothScrollToPosition的滚动时间</title>
    <link href="http://www.angeldevil.me/2015/09/08/The-smoothScrollToPosition-duration-of-RecyclerView/"/>
    <id>http://www.angeldevil.me/2015/09/08/The-smoothScrollToPosition-duration-of-RecyclerView/</id>
    <published>2015-09-08T12:46:54.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>当RecyclerView中的数据集很大时，通过<code>smoothScrollToPosition</code>去滚动到一个位置，如果这个位置和当前位置相差很远，比如说300项，你会发现整个过程很长，比如说我遇到的，滚动300项，用了3.5秒。</p>
<a id="more"></a>
<p>这主要跟RecyclerView smoothScroll的方式有关，它内部有一个常量值代表每滚动1px需要多少时间，所以滚动的距离越远，需要的时间越长。所以当真的需要滚动很多项时，有时看着真心蛋疼，所以就想看看怎么改一下。</p>
<p>看下<code>LinearLayoutmanager.smoothScrollToPosition</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoothScrollToPosition</span><span class="params">(RecyclerView recyclerView, RecyclerView.State state,</span></span></div><div class="line">        <span class="keyword">int</span> position) &#123;</div><div class="line">    LinearSmoothScroller linearSmoothScroller =</div><div class="line">            <span class="keyword">new</span> LinearSmoothScroller(recyclerView.getContext()) &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> PointF <span class="title">computeScrollVectorForPosition</span><span class="params">(<span class="keyword">int</span> targetPosition)</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> LinearLayoutManager.<span class="keyword">this</span></div><div class="line">                            .computeScrollVectorForPosition(targetPosition);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">    linearSmoothScroller.setTargetPosition(position);</div><div class="line">    startSmoothScroll(linearSmoothScroller);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内部是实例化了一个LinearSmoothScroller的实例来处理Scroll事件的，我们自字义一个LinearSmoothScroller应该就能自定义Smooth事件，上面的<code>computeScrollVectorForPosition</code>方法不用管，直接复制过来就行了，因为<code>LinearSmoothScroller</code>是抽象类，这个方法必须实现。</p>
<p>然后看下<code>LinearSmoothScroller</code> 的方法，发现一个方法叫<code>protected int calculateTimeForScrolling(int dx)</code>，看这名字就知道函数的作用了，直接重写这个函数，让它最多返回1500：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">calculateTimeForScrolling</span><span class="params">(<span class="keyword">int</span> dx)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Math.min(<span class="number">1500</span>, <span class="keyword">super</span>.calculateTimeForScrolling(dx));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是，实际滚动时间更长了。。打Log，把每次返回值和dx的值都打印出来，然后继续测试，然后发现这个函数不是计算这一个<code>smoothScrollToPosition</code>需要的时间的，实际情况时，当实际需要滚动的距离大于10000时，滚动会分多次进行，比如说滚动52000距离，实际会这个函数会调用6次，dx的值前5次是10000，最后一次是2000。实际滚动时间是这6次返回值的和。</p>
<p>知道了这个，解决也简单了，它想分多次调用就让它多次调用吧，我只要每次返回的时间值很小就行了。方法有两个。</p>
<ul>
<li>直接修改返回值，让它足够小</li>
<li>修改传入的参数，当dx足够小时，计算出的时间自然就小了。</li>
</ul>
<p>我决定采用第二种方法，当滚动距离比较小时不会造成影响，完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">mLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>, LinearLayoutManager.VERTICAL, <span class="keyword">false</span>) &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoothScrollToPosition</span><span class="params">(RecyclerView recyclerView, RecyclerView.State state, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        LinearSmoothScroller linearSmoothScroller =</div><div class="line">                <span class="keyword">new</span> LinearSmoothScroller(recyclerView.getContext()) &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">calculateTimeForScrolling</span><span class="params">(<span class="keyword">int</span> dx)</span> </span>&#123;</div><div class="line">                        <span class="comment">// 此函数计算滚动dx的距离需要多久，当要滚动的距离很大时，比如说52000，</span></div><div class="line">                        <span class="comment">// 经测试，系统会多次调用此函数，每10000距离调一次，所以总的滚动时间</span></div><div class="line">                        <span class="comment">// 是多次调用此函数返回的时间的和，所以修改每次调用该函数时返回的时间的</span></div><div class="line">                        <span class="comment">// 大小就可以影响滚动需要的总时间，可以直接修改些函数的返回值，也可以修改</span></div><div class="line">                        <span class="comment">// dx的值，这里暂定使用后者.</span></div><div class="line">                        <span class="comment">// (See LinearSmoothScroller.TARGET_SEEK_SCROLL_DISTANCE_PX)</span></div><div class="line">                        <span class="keyword">if</span> (dx &gt; <span class="number">3000</span>) &#123;</div><div class="line">                            dx = <span class="number">3000</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">super</span>.calculateTimeForScrolling(dx);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> PointF <span class="title">computeScrollVectorForPosition</span><span class="params">(<span class="keyword">int</span> targetPosition)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> mLayoutManager.computeScrollVectorForPosition(targetPosition);</div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">        linearSmoothScroller.setTargetPosition(position);</div><div class="line">        startSmoothScroll(linearSmoothScroller);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当RecyclerView中的数据集很大时，通过&lt;code&gt;smoothScrollToPosition&lt;/code&gt;去滚动到一个位置，如果这个位置和当前位置相差很远，比如说300项，你会发现整个过程很长，比如说我遇到的，滚动300项，用了3.5秒。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
      <category term="RecyclerView" scheme="http://www.angeldevil.me/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>LinkMovementMethod与URLSpan相关的两个问题</title>
    <link href="http://www.angeldevil.me/2015/09/08/Two-problems-about-LinkMovementMethod-and-URLSPan/"/>
    <id>http://www.angeldevil.me/2015/09/08/Two-problems-about-LinkMovementMethod-and-URLSPan/</id>
    <published>2015-09-08T12:12:15.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过LinkMovementMethod与URLSpan给TextView添加链接就不说了，大家都知道，不过在使用过程中遇到两个问题，在这里记录一下。</p>
<ul>
<li>一是LinkMovementMethod导致TextView可滚动，可能使文本错位。</li>
<li>二是行尾链接的点击区域，可能点击行尾的空白仍会触发链接点击，有些机型甚至会同时触发View.onClickListener.</li>
</ul>
<a id="more"></a>
<h1 id="LinkMovementMethod导致TextView可滚动"><a href="#LinkMovementMethod导致TextView可滚动" class="headerlink" title="LinkMovementMethod导致TextView可滚动"></a>LinkMovementMethod导致TextView可滚动</h1><p>有时要做和微信朋友圈类似的一个功能，当文本很长时只显示几行，然后有一个按钮可以使文本显示全文或收起。</p>
<p>这个的实现方式一般都是setMaxLine或都根据行高修改LayoutParams的高度。这个本来没有什么。但是如果文本中包含链接，我们就需要添加URLSpan，而如果要URLSpan起作用还需要给TextView设置LinkMovementMethod。这就引起了这里说的问题。</p>
<p>由于设置了maxLine或LayoutParams导致TextView其实是没有显示所有内容的，实际高度小于展示所有内容需要的高度，同时由于设置了LinkMovementMethod，LinkMovementMethod继承自ScrollingMovementMethod，这时其实这个TextView就是可滚动的，不信的话可以开个模拟器设置maxLine试试，鼠标放到TextView上滚动滚轮，你就会看到效果了。</p>
<p>如果这个TextView在ListView或ScrollView中，当滑动ListView时ListView会拦截事件进行滑动，一般也不会出问题，但很偶然的情况下，TextView会先滚动一点点距离，然后ListView才拦截了事件进行滑动（手指按住先横向滑动再竖着滑动容易出现），结果就是TextView中的文本显示错位了。</p>
<p>TextView接收到TouchEvent事件时会把它传递给MovementMethod处理，所以要从LinkMovementMethod下手了，写一个类继承自LinkMovementMethod，重写onTouch方法，添加以下代码就可以了，只是简单地拦截ACTION_MOVE</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(@NonNull TextView widget, @NonNull Spannable buffer,</span></span></div><div class="line">                            @NonNull MotionEvent event) &#123;</div><div class="line">    <span class="keyword">int</span> action = event.getAction();</div><div class="line">    <span class="keyword">if</span> (action == MotionEvent.ACTION_MOVE) &#123;</div><div class="line">        <span class="comment">// Prevent scroll event</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(widget, buffer, event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="链接在TextView的行尾，点击行尾的空白处仍会触发链接的点击跳转"><a href="#链接在TextView的行尾，点击行尾的空白处仍会触发链接的点击跳转" class="headerlink" title="链接在TextView的行尾，点击行尾的空白处仍会触发链接的点击跳转"></a>链接在TextView的行尾，点击行尾的空白处仍会触发链接的点击跳转</h1><p>这个同样是重写LinkMovementMethod.onTouch，跟Span点击相关的基本都在MovementMethod的onTouch中，我们的目的是点击行尾的空白时不触发URLSpan的点击跳转（因为点击空白处其实是没有点击到Span上的），想取消点击事件的触发，跟进源码看看它是怎么触发的，破坏掉它的条件就行了，这里就直接贴出来改好后的代码了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(@NonNull TextView widget, @NonNull Spannable buffer,</span></span></div><div class="line">                            @NonNull MotionEvent event) &#123;</div><div class="line">    <span class="keyword">int</span> action = event.getAction();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (action == MotionEvent.ACTION_MOVE) &#123;</div><div class="line">        <span class="comment">// Prevent scroll event</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (action == MotionEvent.ACTION_UP ||</div><div class="line">            action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</div><div class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</div><div class="line"></div><div class="line">        x -= widget.getTotalPaddingLeft();</div><div class="line">        y -= widget.getTotalPaddingTop();</div><div class="line"></div><div class="line">        x += widget.getScrollX();</div><div class="line">        y += widget.getScrollY();</div><div class="line"></div><div class="line">        Layout layout = widget.getLayout();</div><div class="line">        <span class="keyword">int</span> line = layout.getLineForVertical(y);</div><div class="line">        <span class="keyword">int</span> off = layout.getOffsetForHorizontal(line, x);</div><div class="line"></div><div class="line">        ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (link.length != <span class="number">0</span>) &#123;</div><div class="line">            ClickableSpan cs = link[<span class="number">0</span>];</div><div class="line">            <span class="keyword">int</span> csStart = buffer.getSpanStart(cs);</div><div class="line">            <span class="keyword">int</span> csEnd = buffer.getSpanEnd(cs);</div><div class="line">            <span class="comment">// offset在Span的区间内才认为是点击到了Span上。默认的处理是，如果点击在行尾，即使点击在了</span></div><div class="line">            <span class="comment">// Span外也认为点击了Span，判断点击offset小于line end的原因是点击内容区外面系统也认为点</span></div><div class="line">            <span class="comment">// 击的位置是最后一个文字，影响就是如果链接在行尾，点最后一个字母没反应，不过影响不大</span></div><div class="line">            <span class="keyword">if</span> (off &gt;= csStart &amp;&amp; off &lt; csEnd &amp;&amp; off &lt; layout.getLineEnd(line)) &#123;</div><div class="line">                <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</div><div class="line">                    link[<span class="number">0</span>].onClick(widget);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Selection.setSelection(buffer, buffer.getSpanStart(link[<span class="number">0</span>]), buffer.getSpanEnd(link[<span class="number">0</span>]));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Selection.removeSelection(buffer);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(widget, buffer, event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码中也加了点注释，所做的操作就是，通过<code>layout.getOffsetForHorizontal(line, x)</code>获取用户点击了一行中的哪个字符，获取点击位置包含的<code>ClickableSpan</code>，然后判断offset在span的start与end区间内才算点击了Span，但当点到行尾的空白处时系统也认为点击了最后一个字符，所以如果链接正好在行尾就会认为点击了链接，所以同时判断了如果点击的是行属的最后一个字符就不触发链接点击事件。由于只有当链接在行尾时才有影响，并且手指点上去基本同时点到几个字符，所以影响不大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过LinkMovementMethod与URLSpan给TextView添加链接就不说了，大家都知道，不过在使用过程中遇到两个问题，在这里记录一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一是LinkMovementMethod导致TextView可滚动，可能使文本错位。&lt;/li&gt;
&lt;li&gt;二是行尾链接的点击区域，可能点击行尾的空白仍会触发链接点击，有些机型甚至会同时触发View.onClickListener.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>UniversalImageLoader的一个小问题</title>
    <link href="http://www.angeldevil.me/2015/03/19/a-bug-in-universal-image-loader/"/>
    <id>http://www.angeldevil.me/2015/03/19/a-bug-in-universal-image-loader/</id>
    <published>2015-03-19T09:27:47.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用UniversalImageLoader时遇到了一个小问题，多个地方同时通过<code>ImageLoader.getInstance().loadImage(url, new ImageSize(dp72, dp72)...</code>加载图像时，有一定机率只有部分地方能正确地加载到图片，其他地方是什么结果呢？从Log看是这个样子：</p>
<a id="more"></a>
<blockquote>
<p>1    03-19 15:41:44.167    1500-1541/xxx D/ImageLoader﹕ Start display image task [xxxxxxx/group1/M00/00/04/wKgKklUKfS-AGTJRAAAV5nnd6hE739.jpg_144x144]<br>2    03-19 15:41:44.167    1500-1541/xxx D/ImageLoader﹕ Load image from network [xxxxxxx/group1/M00/00/04/wKgKklUKfS-AGTJRAAAV5nnd6hE739.jpg_144x144]<br>3    03-19 15:41:44.167    1500-1541/xxx D/ImageLoader﹕ Cache image on disk [cxxxxxxx/group1/M00/00/04/wKgKklUKfS-AGTJRAAAV5nnd6hE739.jpg_144x144]<br>4    03-19 15:41:44.187    1500-1538/xxx D/ImageLoader﹕ Start display image task [xxxxxxx/group1/M00/00/04/wKgKklUKfS-AGTJRAAAV5nnd6hE739.jpg_144x144]<br>5    03-19 15:41:44.187    1500-1538/xxx D/ImageLoader﹕ Image already is loading. Waiting… [xxxxxxx/group1/M00/00/04/wKgKklUKfS-AGTJRAAAV5nnd6hE739.jpg_144x144]<br>6    03-19 15:41:44.199    1500-1541/xxx D/ImageLoader﹕ Cache image in memory [xxxxxxx/group1/M00/00/04/wKgKklUKfS-AGTJRAAAV5nnd6hE739.jpg_144x144]<br>7    03-19 15:41:44.199    1500-1538/xxx D/ImageLoader﹕ …Get cached bitmap from memory after waiting. [xxxxxxx/group1/M00/00/04/wKgKklUKfS-AGTJRAAAV5nnd6hE739.jpg_144x144]<br>8    03-19 15:41:44.219    1500-1500/xxx D/ImageLoader﹕ Display image in ImageAware (loaded from NETWORK) [xxxxxxx/group1/M00/00/04/wKgKklUKfS-AGTJRAAAV5nnd6hE739.jpg_144x144]<br>9    03-19 15:41:44.219    1500-1500/xxx D/ImageLoader﹕ ImageAware is reused for another image. Task is cancelled. [xxxxxxx/group1/M00/00/04/wKgKklUKfS-AGTJRAAAV5nnd6hE739.jpg_144x144]</p>
</blockquote>
<p>有了Log，再结合源码，看下到底是什么原因，从上面的Log可以看到，两个地方加载同一张图片，都发现缓存中没有，所以都从网络上加载（通过分析可以知道，第1，2，3，6，8是第一个加载的地方的Log，4，5，7，9是第二个加载的地方的Log）。</p>
<p>UniversalImageLoader实际加载图片的类叫<code>LoadAndDisplayImageTask</code>，这是一个<code>Runnable</code>，所以我们从它的<code>run</code>方法开始看。首先要强调一点，由于这两个地方加载的是相同的Url，并且ImageSize相同，所以它们的memoryCacheKey是相同的，接下来就看<code>run</code>方法，首先是第一部分代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ReentrantLock loadFromUriLock = imageLoadingInfo.loadFromUriLock;</div><div class="line">L.d(LOG_START_DISPLAY_IMAGE_TASK, memoryCacheKey);</div><div class="line"><span class="keyword">if</span> (loadFromUriLock.isLocked()) &#123; <span class="comment">// 注意这里</span></div><div class="line">    L.d(LOG_WAITING_FOR_IMAGE_LOADED, memoryCacheKey);</div><div class="line">&#125;</div><div class="line"></div><div class="line">loadFromUriLock.lock();</div></pre></td></tr></table></figure>
<p>由于memoryCacheKey相同，所以这里获得的是同一个锁，结果就是第一个线程锁住这个锁进行图片加载，所以打印出了前3行Log。</p>
<p>接着轮到第二个线程执行，它发现另一个线程锁住了<code>loadFromUriLock</code>，所以它打印出了第4和第5行Log。</p>
<p>然后又换第一个线程执行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    checkTaskNotActual();</div><div class="line">    bmp = configuration.memoryCache.get(memoryCacheKey);</div><div class="line">    <span class="keyword">if</span> (bmp == <span class="keyword">null</span> || bmp.isRecycled()) &#123;</div><div class="line">        bmp = tryLoadBitmap();</div><div class="line">        <span class="keyword">if</span> (bmp == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        checkTaskNotActual();</div><div class="line">        checkTaskInterrupted();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (bmp != <span class="keyword">null</span> &amp;&amp; options.isCacheInMemory()) &#123;</div><div class="line">            L.d(LOG_CACHE_IMAGE_IN_MEMORY, memoryCacheKey); <span class="comment">// 1</span></div><div class="line">            configuration.memoryCache.put(memoryCacheKey, bmp);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        loadedFrom = LoadedFrom.MEMORY_CACHE;</div><div class="line">        L.d(LOG_GET_IMAGE_FROM_MEMORY_CACHE_AFTER_WAITING, memoryCacheKey); <span class="comment">// 2</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    checkTaskNotActual();</div><div class="line">    checkTaskInterrupted();</div><div class="line">&#125; <span class="keyword">catch</span> (TaskCancelledException e) &#123;</div><div class="line">    fireCancelEvent();</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="comment">// 释放锁</span></div><div class="line">    loadFromUriLock.unlock();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 显示图片</span></div><div class="line">DisplayBitmapTask displayBitmapTask = <span class="keyword">new</span> DisplayBitmapTask(bmp, imageLoadingInfo, engine, loadedFrom);</div><div class="line">runTask(displayBitmapTask, syncLoading, handler, engine);</div></pre></td></tr></table></figure>
<p>第一个线程加载完图片后，在<code>finally</code>中释放了锁，然后通过<code>DisplayBitmapTask</code>进行图片的显示，从Log中可以分析出，线程中加载完图片后打印了注释1处的Log，然后释放了锁，轮到线程2执行。</p>
<p>由于线程一已经加载完图片并存入了缓存了，所以线程二会进入代码注释2的代码块，打印出第7行Log。</p>
<p>然后线程一线程二再依次运行分别打印第8，9行Log，两个线程都取到了Bitmap，为何会一个正确加载完图片，而另一个有一定机率加载不到呢？这要看UniversalImageLoader的缓存与判断View重用的机制。</p>
<p>ImageLoader在加载图片前会调用<code>ImageLoaderEngine.prepareDisplayTaskFor</code>方法来记录一些东西，具体就是记录一个ImageAware在加载哪一个Url，以判断当图片加载完成后，这个ImageAware是否被重用来加载其他的Url了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, String&gt; cacheKeysForImageAwares = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Integer, String&gt;());</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepareDisplayTaskFor</span><span class="params">(ImageAware imageAware, String memoryCacheKey)</span> </span>&#123;</div><div class="line">    cacheKeysForImageAwares.put(imageAware.getId(), memoryCacheKey);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到就是通过一个Map记录的，以ImageAware的id为键，对于LoadImage方法，使用的是<code>NonViewAware</code>，它的id是<code>Url.hasCode</code>，所以两个地方加载同一个图片，在<code>cacheKeysForImageAwares</code>中只有一条记录。</p>
<p>当加载完图片后是通过<code>DisplayBitmapTask</code>来显示图片并回调我们的Listener的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (imageAware.isCollected()) &#123;</div><div class="line">        L.d(LOG_TASK_CANCELLED_IMAGEAWARE_COLLECTED, memoryCacheKey);</div><div class="line">        listener.onLoadingCancelled(imageUri, imageAware.getWrappedView());</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isViewWasReused()) &#123;</div><div class="line">        L.d(LOG_TASK_CANCELLED_IMAGEAWARE_REUSED, memoryCacheKey);</div><div class="line">        listener.onLoadingCancelled(imageUri, imageAware.getWrappedView());</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        L.d(LOG_DISPLAY_IMAGE_IN_IMAGEAWARE, loadedFrom, memoryCacheKey);</div><div class="line">        displayer.display(bitmap, imageAware, loadedFrom);</div><div class="line">        engine.cancelDisplayTaskFor(imageAware);</div><div class="line">        listener.onLoadingComplete(imageUri, imageAware.getWrappedView(), bitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cancelDisplayTaskFor</span><span class="params">(ImageAware imageAware)</span> </span>&#123;</div><div class="line">    cacheKeysForImageAwares.remove(imageAware.getId());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isViewWasReused</span><span class="params">()</span> </span>&#123;</div><div class="line">    String currentCacheKey = engine.getLoadingUriForView(imageAware);</div><div class="line">    <span class="keyword">return</span> !memoryCacheKey.equals(currentCacheKey);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当第一个地方执行到这个run方法时，会走到else分支里，打印出第8行的Log，然后调用<code>ImageLoaderEngine.cancelDisplayTaskFor</code>方法，移除在Map中的记录，并回调我们的Listener。</p>
<p>然后第二个地方执行到run中的<code>isViewWasReused</code>方法时，由于Map中的记录已经被第一个线程移除了，所以取得的currentCacheKey是null，就会判定为View被重用了，所以不能得到正确的结果。</p>
<p>那么为什么有时两个地方能同时得到正确的结果呢？那是因为如果当第一个线程进入到else代码块但在执行<code>cancelDisplayTaskFor</code>之前进行了线程调度，另一个线程还是有机会同时进入else代码块的。</p>
<p>其实对于NonViewAware，基本是不可能被重用的，所以感觉在这里可以做下特殊处理，或者对其生成 id的方法进行下修改（但这样会多次从网络取同一张图片）。或者像Volley一样，当执行一个请求时，如果发现这个图片正在Loading，就将其加入一个列表，当加载完后统一向这个列表里的请求发送消息，但这个修改就比较麻烦了，所以还是对NonViewAware做下特殊处理比较好，毕竟这个基本是不可能被重用的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用UniversalImageLoader时遇到了一个小问题，多个地方同时通过&lt;code&gt;ImageLoader.getInstance().loadImage(url, new ImageSize(dp72, dp72)...&lt;/code&gt;加载图像时，有一定机率只有部分地方能正确地加载到图片，其他地方是什么结果呢？从Log看是这个样子：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>圆角图片，可以指定特定的角为圆角</title>
    <link href="http://www.angeldevil.me/2014/12/29/rounded-image/"/>
    <id>http://www.angeldevil.me/2014/12/29/rounded-image/</id>
    <published>2014-12-29T05:00:38.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于圆角图片的实现，网上应该有很多例子，主要就是使用BitmapShader，比如<a href="https://github.com/nostra13/Android-Universal-Image-Loader/blob/master/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java" target="_blank" rel="external">Universal-Image-Loader中的RoundedBitmapDisplayer</a>，本文中的实现都是基于这个<a href="https://github.com/nostra13/Android-Universal-Image-Loader/blob/master/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java" target="_blank" rel="external">RoundedBitmapDisplayer</a>。</p>
<a id="more"></a>
<p><a href="https://github.com/nostra13/Android-Universal-Image-Loader/blob/master/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java" target="_blank" rel="external">RoundedBItmapDisplayer</a>通过我们指定的Bitmap生成了一个BitmapShader并与Paint关联，在draw里面使用这个Paint进行drawRoundRect，drawRoundRect是Canvas的API，用于画一个圆角距形，但如果我们不想让4个角都是圆角呢，比如只想要左边的两个角是圆角？</p>
<p>开始我是这么想的，调用drawRoundRect时指定的Rect的宽度超出View宽度cornerRadius大小，这样右边两个圆角超出了View的区域就不会被显示出来，就只有左边两个角是圆角了，像下面这样（所有的修改基于<a href="https://github.com/nostra13/Android-Universal-Image-Loader/blob/master/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java" target="_blank" rel="external">RoundedBitmapDisplayer</a>）:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">RoundedDrawable</span><span class="params">(Bitmap bitmap, <span class="keyword">int</span> cornerRadius)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    mBitmapRect = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, bitmap.getWidth() + cornerRadius, bitmap.getHeight());</div><div class="line">   ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onBoundsChange</span><span class="params">(Rect bounds)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onBoundsChange(bounds);</div><div class="line">    mRect.set(<span class="number">0</span>, <span class="number">0</span>, bounds.width() + cornerRadius, bounds.height());</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但这样图片应该会变形或被截断什么的，并且如果我只想要左上角和右下角是圆角呢？</p>
<p>然后就想到了接下来的方法，先像原来一样画一个圆角距形的图片，再把不需要圆角的角画出来，这样就只有指定的角是圆角了，完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundedImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORNER_NONE = <span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORNER_TOP_LEFT = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORNER_TOP_RIGHT = <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORNER_BOTTOM_LEFT = <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORNER_BOTTOM_RIGHT = <span class="number">1</span> &lt;&lt; <span class="number">3</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORNER_ALL = CORNER_TOP_LEFT | CORNER_TOP_RIGHT | CORNER_BOTTOM_LEFT | CORNER_BOTTOM_RIGHT;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundedImageView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundedImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(Bitmap bmp, <span class="keyword">int</span> radius, <span class="keyword">int</span> corners)</span> </span>&#123;</div><div class="line">        setImageDrawable(<span class="keyword">new</span> RoundedDrawable(bmp, radius, corners));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundedDrawable</span> <span class="keyword">extends</span> <span class="title">Drawable</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">float</span> cornerRadius;</div><div class="line"></div><div class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> RectF mRect = <span class="keyword">new</span> RectF(), mBitmapRect;</div><div class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> BitmapShader bitmapShader;</div><div class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> Paint paint;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> corners;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RoundedDrawable</span><span class="params">(Bitmap bitmap, <span class="keyword">int</span> cornerRadius, <span class="keyword">int</span> corners)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.cornerRadius = cornerRadius;</div><div class="line">            <span class="keyword">this</span>.corners = corners;</div><div class="line"></div><div class="line">            bitmapShader = <span class="keyword">new</span> BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</div><div class="line">            mBitmapRect = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, bitmap.getWidth(), bitmap.getHeight());</div><div class="line"></div><div class="line">            paint = <span class="keyword">new</span> Paint();</div><div class="line">            paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">            paint.setShader(bitmapShader);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onBoundsChange</span><span class="params">(Rect bounds)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onBoundsChange(bounds);</div><div class="line">            mRect.set(<span class="number">0</span>, <span class="number">0</span>, bounds.width(), bounds.height());</div><div class="line"></div><div class="line">            <span class="comment">// Resize the original bitmap to fit the new bound</span></div><div class="line">            Matrix shaderMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">            shaderMatrix.setRectToRect(mBitmapRect, mRect, Matrix.ScaleToFit.FILL);</div><div class="line">            bitmapShader.setLocalMatrix(shaderMatrix);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">            canvas.drawRoundRect(mRect, cornerRadius, cornerRadius, paint);</div><div class="line">            <span class="keyword">int</span> notRoundedCorners = corners ^ CORNER_ALL;</div><div class="line">            <span class="keyword">if</span> ((notRoundedCorners &amp; CORNER_TOP_LEFT) != <span class="number">0</span>) &#123;</div><div class="line">                canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, cornerRadius, cornerRadius, paint);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ((notRoundedCorners &amp; CORNER_TOP_RIGHT) != <span class="number">0</span>) &#123;</div><div class="line">                canvas.drawRect(mRect.right - cornerRadius, <span class="number">0</span>, mRect.right, cornerRadius, paint);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ((notRoundedCorners &amp; CORNER_BOTTOM_LEFT) != <span class="number">0</span>) &#123;</div><div class="line">                canvas.drawRect(<span class="number">0</span>, mRect.bottom - cornerRadius, cornerRadius, mRect.bottom, paint);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ((notRoundedCorners &amp; CORNER_BOTTOM_RIGHT) != <span class="number">0</span>) &#123;</div><div class="line">                canvas.drawRect(mRect.right - cornerRadius, mRect.bottom - cornerRadius, mRect.right, mRect.bottom, paint);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOpacity</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> PixelFormat.TRANSLUCENT;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlpha</span><span class="params">(<span class="keyword">int</span> alpha)</span> </span>&#123;</div><div class="line">            paint.setAlpha(alpha);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColorFilter</span><span class="params">(ColorFilter cf)</span> </span>&#123;</div><div class="line">            paint.setColorFilter(cf);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="left.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;<img src="tl_br.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于圆角图片的实现，网上应该有很多例子，主要就是使用BitmapShader，比如&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/blob/master/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java&quot;&gt;Universal-Image-Loader中的RoundedBitmapDisplayer&lt;/a&gt;，本文中的实现都是基于这个&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/blob/master/library%2Fsrc%2Fcom%2Fnostra13%2Funiversalimageloader%2Fcore%2Fdisplay%2FRoundedBitmapDisplayer.java&quot;&gt;RoundedBitmapDisplayer&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Toolbar作为ActionBar与标题居中</title>
    <link href="http://www.angeldevil.me/2014/12/24/toolbar-as-actionbar-and-centered-title/"/>
    <id>http://www.angeldevil.me/2014/12/24/toolbar-as-actionbar-and-centered-title/</id>
    <published>2014-12-24T07:31:42.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Toollbar作为ActionBar很简单，直接获取到Toolbar后调用<code>setSupportActionBar(toolbar);</code>就行了，但是如果整个应用中统一使用Toolbar替代ActionBar的话，最方便的方式肯定是将Toolbar的布局提取出来然后在不同的Activity中直接<code>include</code>，像下面这样：</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">​    <span class="attr">android:layout_height</span>=<span class="string">"?actionBarSize"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@null"</span></div><div class="line">    <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></div><div class="line">    <span class="attr">app:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar_title"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/TextAppearance.AppCompat.Widget.ActionBar.Title"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">              <span class="attr">tools:context</span>=<span class="string">"com.e7live.dreamfuture.activity.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/toolbar"</span>/&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后，为了使用方便，在BaseActivity中设置Toolbar为ActionBar：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">View v = findViewById(R.id.toolbar);</div><div class="line"><span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</div><div class="line">    toolbar = (Toolbar) v;</div><div class="line">    setSupportActionBar(toolbar);</div><div class="line">    toolbarTitle = (TextView) v.findViewById(R.id.toolbar_title);</div><div class="line">    <span class="keyword">if</span> (toolbarTitle != <span class="keyword">null</span>) &#123;</div><div class="line">        getSupportActionBar().setDisplayShowTitleEnabled(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是，在BaseActivity中什么时候调用上面这一段代码呢？一般情况下很多操作会在BaseActivity的onCreate中执行，但一般子类的写法是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在BaseActivity的onCreate中还没有设置ContentView，通过findViewById是找不到Toolbar的，而且一般情况下会在Activity的onCreate中设置ActionBar的一些属性，想到的最适合执行这段代码的地方就是在BaseActivity中重载<code>setContentView</code>了。</p>
<p>只需要注意一点，就是在子类的onCreate中对ActionBar的操作要在setContentView之后，一般这个不会有什么问题。</p>
<p>再说下标题居中，前面在toolbar.xml中看到在Toolbar内有一个TextView，是用来作为标题的，在BaseActivity重载的setContentView中也判断了如果存在这个TextView就隐藏掉Toolbar原来的Title，Toolbar是一个ViewGroup，可以很方便地添加ChildView并设置相关属性。</p>
<p>显示标题的TextView有了，原来的标题也被隐藏了，接下来就是怎么给这个作为标题的TextView设置要显示的标题了，当然可以在每个Activity中对这个TextView调用setText，但太麻烦了，我们都很懒的，很多页面的标题也都是写到AndroidManifest中的。其实Activity有一个<code>onTitleChanged</code>的接口，在Activity的<code>onPostCreate</code>与<code>setTitle</code>中都会调用这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isChild()) &#123;</div><div class="line">        mTitleReady = <span class="keyword">true</span>;</div><div class="line">        onTitleChanged(getTitle(), getTitleColor());</div><div class="line">    &#125;</div><div class="line">    mCalled = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以只需要在BaseActivity中重载这个方法就行了，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onTitleChanged</span><span class="params">(CharSequence title, <span class="keyword">int</span> color)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onTitleChanged(title, color);</div><div class="line">    <span class="keyword">if</span> (toolbarTitle != <span class="keyword">null</span>) &#123;</div><div class="line">        toolbarTitle.setText(title);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过AndroidManifest指定的Title会自动显示到这个TextView中，不用做任何处理，如果在代码中想改变标题的话，直接调用<code>Activity.setTitle</code>就行了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Toollbar作为ActionBar很简单，直接获取到Toolbar后调用&lt;code&gt;setSupportActionBar(toolbar);&lt;/code&gt;就行了，但是如果整个应用中统一使用Toolbar替代ActionBar的话，最方便的方式肯定是将Toolbar的布局提取出来然后在不同的Activity中直接&lt;code&gt;include&lt;/code&gt;，像下面这样：&lt;/p&gt;
    
    </summary>
    
    
      <category term="ActionBar" scheme="http://www.angeldevil.me/tags/ActionBar/"/>
    
      <category term="Toolbar" scheme="http://www.angeldevil.me/tags/Toolbar/"/>
    
  </entry>
  
  <entry>
    <title>AutoScrollViewPager</title>
    <link href="http://www.angeldevil.me/2014/10/13/AutoScrollViewPager/"/>
    <id>http://www.angeldevil.me/2014/10/13/AutoScrollViewPager/</id>
    <published>2014-10-13T07:24:19.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多程序有循环播放的界面，比如广告，活动等。这种界面的实现一般情况下会多个元素自动播放，无限循环，网上找了下，主要有两种实现方式：</p>
<a id="more"></a>
<ul>
<li>ViewPager有非常多个元素来实现无缝循环</li>
<li>在ViewPager的前后分别插入原来的最后一页和第一页，如下图所示，直接引用别人的图片了：<br><img src="http://images.cnitblog.com/blog/405193/201306/09143039-879985de15714f779303f7f01ddbbaca.png" alt=""></li>
</ul>
<p>一般这种页面都会有指示当前页面的小圆点，这个小圆点可以硬编码，也可以使用ViewPagerIndicator来实现，硬编码不太方便，而使用ViewPagerIndicator的话也有一点问题，直接就把第一种方法排除了，第二种方法也没有发现现成的好的实现，所以就自己按这个思路实现了一个，效果如下所示：</p>
<p><img src="https://github.com/angeldevil/AutoScrollViewPager/raw/master/art/demo.gif" alt=""></p>
<p>因为要在实际的Adapter前后各加一页数据，所以写了一个<code>AutoScrollPagerAdapter</code>封装用户指定的Adapter，并重写了ViewPager的<code>setAdapter</code>方法使这个封装透明化，并重写了<code>getAdapter</code>返回原来的Adapter，这样也兼容了PagerIndicator</p>
<p>对于<code>OnPageChangeListener</code>，由于额外添加了两个页面，<code>OnPageChangeListener</code>中页面的position肯定会有变化，所以需要做下处理，设置一个内部的<code>InnerOnPageChangeListener</code>并重写了<code>setOnPageChangeListener</code>使之透明化</p>
<p>详细实现可以直接看代码：<a href="https://github.com/angeldevil/AutoScrollViewPager" target="_blank" rel="external">AutoScrollViewPager</a>，重要的地方加了注释，这里就不多说了，以下是主要方法</p>
<ul>
<li>startAutoScroll([intervalInMillis])：自动播放，可以指定播放间隔，单位为ms，如果不指定，采用上一次start时指定的值或默认值2s</li>
<li>stopAutoScroll()：停止自动播放</li>
<li>setInterval(long)：播放间隔</li>
<li>setScrollFactor(double)：页面间切换时间因子，页面切换的时间会乘以这个Factor</li>
<li>setOnPageClickListener(AutoScrollViewPager.OnPageClickListener)：监听页面点击</li>
</ul>
<p>有两点需要说一下。</p>
<p>一、OnPageSelected</p>
<p>对用户指定的Adapter的第一页和最后一页会调用两次<code>OnPageSelected</code>，在<code>InnerOnPageChangeListener.onPageSelected</code>中有注释说明。也有解决方法，但这样要么对ViewPagerIndicator会有影响，要么有其他一点很微小的影响，也懒得想其他解决方法，因为感觉影响不大，所以现在还是触发两次。</p>
<p>二、ScrollFactor</p>
<p>对于ScrollFactor，自动播放时默认的滚动速度是很快的，所以添加了这个方法修改滚动速度，先看下ViewPager的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> duration = <span class="number">0</span>;</div><div class="line">velocity = Math.abs(velocity);</div><div class="line"><span class="keyword">if</span> (velocity &gt; <span class="number">0</span>) &#123;</div><div class="line">    duration = <span class="number">4</span> * Math.round(<span class="number">1000</span> * Math.abs(distance / velocity));</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> pageWidth = width * mAdapter.getPageWidth(mCurItem);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> pageDelta = (<span class="keyword">float</span>) Math.abs(dx) / (pageWidth + mPageMargin);</div><div class="line">    duration = (<span class="keyword">int</span>) ((pageDelta + <span class="number">1</span>) * <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line">duration = Math.min(duration, MAX_SETTLE_DURATION); </div><div class="line">mScroller.startScroll(sx, sy, dx, dy, duration);</div></pre></td></tr></table></figure>
<p>用户用手滑动翻页时velocity &gt; 0，用代码翻页时velocity = 0，使用的Scroller计算滚动，所以设置了一个自定义的Scroller用来改变duration，但是其实用户手动滑动时的滚动速度还是可以的，只是自动翻页时速度过快，而通过设置Scroller的方法改变duration会同时影响两者，所以在<code>onTouch</code>做了下处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">    <span class="comment">// Manually swipe not affected by scroll factor.</span></div><div class="line">    <span class="keyword">if</span> (scroller != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">double</span> lastFactor = scroller.getFactor();</div><div class="line">        scroller.setFactor(<span class="number">1</span>);</div><div class="line">        post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                scroller.setFactor(lastFactor);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>源码：<a href="https://github.com/angeldevil/AutoScrollViewPager" target="_blank" rel="external">AutoScrollViewPager</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多程序有循环播放的界面，比如广告，活动等。这种界面的实现一般情况下会多个元素自动播放，无限循环，网上找了下，主要有两种实现方式：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
      <category term="ViewPager" scheme="http://www.angeldevil.me/tags/ViewPager/"/>
    
  </entry>
  
  <entry>
    <title>Android Secret Code</title>
    <link href="http://www.angeldevil.me/2014/09/23/Android-Secret-Code/"/>
    <id>http://www.angeldevil.me/2014/09/23/Android-Secret-Code/</id>
    <published>2014-09-23T08:36:13.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们很多人应该都做过这样的操作，打开拨号键盘输入<strong>*#*#4636#*#*</strong>等字符就会弹出一个界面显示手机相关的一些信息，这个功能在Android中被称为<strong>android secret code</strong>，除了这些系统预置的secret code，我们也可以实现自己的secret code，而且实现起来非常简单。</p>
<a id="more"></a>
<p>要实现自己的secret code，只需要向系统注册一个Broadcast Receiver，不需要任何权限，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".SecretReceiver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.provider.Telephony.SECRET_CODE"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"android_secret_code"</span> <span class="attr">android:host</span>=<span class="string">"0123"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<p>只需要注册action为<strong>android.provider.Telephony.SECRET_CODE</strong>，并且scheme为<strong>android_secret_code</strong>的Broadcast Receiver，这样当用户在拨号键盘输入<strong>*#*#0123#*#*</strong>时就会调用我们注册的Receiver了，在Receiver中把接收到的Intent信息打出来会是这样：</p>
<blockquote>
<p>Intent { act=android.provider.Telephony.SECRET_CODE dat=android_secret_code://0123 flg=0x10 cmp=me.angeldevil.secretcode/.SecretReceiver }</p>
</blockquote>
<p>这个逻辑的处理在拨号应用里，如果使用第三方拨号应用而这个应用又没有处理的话，也许会失效。</p>
<p>那么这个功能有什么做用呢？这个就看应用需要了，由于这个Broadcast Receiver运行在你自己的应用进程内，所以可以读取你应用内的一切数据。比如说你可以在接收到Broadcast后dump应用状态，可以打开一个Activity做一些特殊设置，可以启用/禁用一些功能（比如Flyme就可以在输入*#*#6961#*#*后在设置中显示一些辅助功能，可以开启Root等）。</p>
<p>但是，不同的Receiver可以注册相同的android:host，可能会跟其他应用的设置冲突，不过一般情况下应用应该不会使用这个功能，非系统级应用的控制还是放到应用内比较好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们很多人应该都做过这样的操作，打开拨号键盘输入&lt;strong&gt;*#*#4636#*#*&lt;/strong&gt;等字符就会弹出一个界面显示手机相关的一些信息，这个功能在Android中被称为&lt;strong&gt;android secret code&lt;/strong&gt;，除了这些系统预置的secret code，我们也可以实现自己的secret code，而且实现起来非常简单。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
      <category term="Android Secret Code" scheme="http://www.angeldevil.me/tags/Android-Secret-Code/"/>
    
  </entry>
  
  <entry>
    <title>与Status Bar和Navigation Bar相关的一些东西</title>
    <link href="http://www.angeldevil.me/2014/09/02/About-Status-Bar-and-Navigation-Bar/"/>
    <id>http://www.angeldevil.me/2014/09/02/About-Status-Bar-and-Navigation-Bar/</id>
    <published>2014-09-02T07:16:59.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>与StatusBar和NavigationBar相关的东西有两种，一是控制它们的显示与隐藏，二是控制它们的透明与否及背景。</p>
<a id="more"></a>
<p>在2.3及以前，StatusBar只能显示与隐藏，即全屏模式，通过<code>WindowManager.LayoutParams.FLAG_FULLSCREEN</code>来实现：</p>
<pre><code>getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
</code></pre><p>并可通过以下Flag使Activity的布局可以使用整个屏幕，状态栏会显示到Activity上方并遮盖部分布局</p>
<pre><code>getWindow().addFlags(WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
            | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);
</code></pre><p>在3.0(API 11)中，添加了一个重要的方法：<code>setSystemUiVisibility(int)</code>，用于控制包括Status Bar在内的一些窗口装饰元素的显示，并添加了<code>View.STATUS_BAR_VISIBLE</code>和<code>View.STATUS_BAR_HIDDEN</code>两个Flag用于控制Status Bar的显示与隐藏，但在4.0(API 14)中废弃了。</p>
<p>在4.0(API 14)中，Andorid引入了Navigation Bar，并添加了一个Flag：<code>SYSTEM_UI_FLAG_HIDDEN_NAVIGATION</code>用于控制Navigatoin Bar的显示。3.0中被弃用的<code>View.STATUS_BAR_VISIBLE</code>被<code>View.SYSTEM_UI_VISIBLE</code>替代，<code>View.STATUS_BAR_HIDDEN</code>被<code>View.SYSTEM_UI_LOW_PROFILE</code>替代，<code>View.SYSTEM_UI_LOW_PROFILE</code>不会使Status Bar和Navigation Bar消失，而是会使它们变暗，降低它们对视觉的干扰，使用户可以专注于应用的内容，但仍可响应用户的交互，当和它们的交互发生时，会退出Low Profile的状态。</p>
<p>在4.1(API 16)中，对Status Bar和Navigation Bar的控制进一步增强，引入了<code>View.SYSTEM_UI_FLAG_FULLSCREEN</code>，和<code>View.SYSTEM_UI_HIDDEN_NAVIGATION</code>分别控制Status Bar和Navigation Bar的显示。并同时引入了另外三个Flag：<code>View.SYSTEM_UI_FLAG_LAYOUT_STABLE</code>、<code>View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</code>和<code>View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</code>。</p>
<p>显示System UI：</p>
<pre><code>getWindow().getDecorView().setSystemUiVisibility(
        View.SYSTEM_UI_FLAG_LAYOUT_STABLE
        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
</code></pre><p>隐藏System UI</p>
<pre><code>getWindow().getDecorView().setSystemUiVisibility(
          View.SYSTEM_UI_FLAG_FULLSCREEN
        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
        | View.SYSTEM_UI_FLAG_IMMERSIVE
        | View.SYSTEM_UI_FLAG_LAYOUT_STABLE
        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
</code></pre><p>通过上面那段<code>View.SYSTEM_UI_FLAG_FULLSCREEN</code>、<code>View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</code>相关的代码实现的全屏模式，可以隐藏掉Status Bar和Navigation Bar，但是这些都是很重要的功能，尤其是Navigation Bar，对于只有虚拟按键的手机，如果隐藏掉Navigation Bar，连切换程序都做不到，所以，当用户和手机有任何交互的时候都会重新显示Status Bar和Navigation Bar，这被称为<strong>LEAN BACK</strong>模式。这很适合视频播放的场景，但对于其他一些场景可能就不适合了，比如读书。</p>
<p>所以，在4.4(API 19)中引入了沉浸模式<code>View.SYSTEM_UI_FLAG_IMMERSIVE</code>和<code>View.SYSTEM_UI_FLAG_IMMERSIVE_STICK</code>。在IMMERSIVE模式中，用户的普通交互并不会使系统退出IMMERSIVE模式，如果要退出IMMERSIVE模式，需要在屏幕的顶部或底部向内滑动。这可以使用户专注于内容，但退出方式并不像LEAN BACK模式那么明显，所以在第一次进入IMMERSIVE时，系统会弹出一个UI提醒退出的方法。<code>SYSTEM_UI_FLAG_IMMERSIVE</code>等需要和<code>SYSTEM_UI_FLAG_FULLSCREEN</code>、<code>SYSTEM_UI_FLAG_HIDE_NAVIGATION</code>一起使用。</p>
<p>IMMERSIVE_STICKY和IMMERSIVE的区别是，在IMMERSIVE中，用户从屏幕顶部或底部向内滑动时会退出IMMERSIVE模式，需要手动控制再次进入IMMERSIVE模式，而在IMMERSIVE_STICKY模式中，同样的操作只会使系统以半透明方法显示System UI方便用户操作，并会在一段时间后自动隐藏，此时并不会引起<code>onSystemUiVibilityChanged</code>的调用。</p>
<p>可以看到，关于全屏，关于System UI的控制，如果想有好的体验，还是有很多细节需要处理的，不过幸好，chrisbanes大神写了一个类来处理这些细节：<a href="https://gist.github.com/chrisbanes/73de18faffca571f7292" target="_blank" rel="external">https://gist.github.com/chrisbanes/73de18faffca571f7292</a></p>
<p>除了控制System UI的显示和隐藏外，还可以使它们变成透明的，在4.4(API 19)中还引入了<code>WindowManager.LayoutParams.FLAG_TRANSUCENT_STATUS</code>和<code>WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION</code>用于控制System UI变透明，这两个Flag分别对应于<code>windowTranslucentStatus</code>和<code>windowTranslucentNavigation</code>两个attr，并同时提供了相应的Theme（这些Theme都没有ActionBar），当使用这两个Flag时，<code>SYSTEM_UI_FLAG_LAYOUT_STABLE</code>、<code>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</code>和<code>SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</code>会被自动添加。</p>
<p>当System UI变透明后，Activity的UI占据整个屏幕，System UI覆盖在Activity的UI上面，对于一般的应用，虽然System UI透明了，但会发现效果并没有那么好，因为ActionBar还是在Status Bar下面，Status Bar变为透明后会透出Activity的UI，一般情况下这部分UI和ActionBar放到一起并不是那么协调。可以设置窗口的背景和ActionBar的色调一致，但会引起OverDraw，并且如果指定的布局撑不满全屏呢？</p>
<p>我们知道，Activity顶部的布局是DecorView，而DecorView继承自FrameLayout，所以可以添加两个View到DecorView中，占据Status Bar和Navigation Bar的位置，并设置它们的背景使其与ActionBar相配，但这需要计算Status Bar和Navigation Bar的大小，并且需要判断Navigation Bar的位置（Bottom or Right）。正好，也有人做了这样的事：<a href="https://github.com/jgilfelt/SystemBarTint" target="_blank" rel="external">https://github.com/jgilfelt/SystemBarTint</a></p>
<p>无论是LEAN_BACK模式还是IMMERSIVE模式，都使用到了4.1中引入的三个Flag：<code>SYSTEM_UI_FLAG_LAYOUT_STABLE</code>、<code>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</code>和<code>SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</code>，它们的用处并不像<code>SYSTEM_UI_FLAG_FULLSCREEN</code>那么明显，而且名称还很相似，要了解它们的用处，需要先了解一个内容边衬区的概念（ContentInset）及一个重要的函数<code>View.fitSystemWindows</code>。</p>
<p>默认情况下，应用程序窗口在Status Bar下面，系统已经处理好了应用窗口的显示，我们不需要关心Inset和fitSystemWindow，但有一些情况就要我们自己处理了。</p>
<p>当使用了Translucent System UI或SYSTEM_UI_FLAG_FULLSCREEN等时，Activity的UI可以显示到System UI下面，System UI在显示时可能会盖住Activity的UI，所以可能需要处理这样的情况，这就需要知道System UI会占用的空间大小是多少，这个大小就是内容边初区（ContentInset），系统会通过<code>fitSystemWindows(Rect)</code>来通知我们，我们可以通过这个方法调整我们的内容显示。</p>
<p>还有一个方法是<code>View.setFitSystemWindows(boolean)</code>，用于设置是否使用系统默认的<code>fitSystemWindows</code>实现。系统的默认实现会消耗掉内容边衬区空间的占用，算到View的Padding里面，并返回true，否则什么也不做返回false，当返回false时，会继续调用View Hierarchy中其他View的<code>fitSystemWindows</code>，直到某一个View中返回true，调用顺序是深度优先。如果我们决定自己处理System UI的空间占用，可以重写VIew的<code>fitSystemWIndows</code>并返回true，如果自己只是做些处理，仍想调用系统的默认实现，要记得调用<code>super.fitSystemWindows</code>并返回false。</p>
<p>接下来就可以说<code>SYSTEM_UI_FLAG_LAYOUT_STABLE</code>等的作用了。在使用<code>View.SYSTEM_UI_FLAG_FULLSCREEN|View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</code>时，Status Bar和Navigation Bar都会隐藏，Activity的UI占据整个屏幕，当System UI再次显示时，应用程序窗口会被Resize，为System UI腾出空间，这会引起屏幕的跳动，这三个Flag的作用就在于此，<code>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</code>和<code>SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</code>要和<code>SYSTEM_UI_FLAG_LAYOUT_STABLE</code>一起使用，用于控制当Status Bar或Navigation Bar显示或隐藏时，Activity的UI是否会被Resize，当使用这三个Flag时，Activity会占用整个屏幕空间，并通过<code>fitSystemWindows</code>传入的Insets标明Insets的大小（对于<code>SYSTEM_UI_FLAG_FULLSCREEN</code>会同时包含ActionBar的大小），我们可以根据这个Insets的大小调整内容的显示，如果给ContentView设置fitSystemWindows为true，会自动把Iinset转化为padding。</p>
<p>有几点需要注意的是：</p>
<ol>
<li>当调用<code>fitSystemWindows</code>时是深度优先遍历</li>
<li><code>setSystemUiVibility</code>是View中定义的方法，所以我们可以用Activity布局中任意一个View控制System UI，只要这个View不是Gone状态，系统会组合所有可见View的设置，所以一般情况下会直接对DecorView进行设置。</li>
<li>当切换程序时，系统会清除<code>SYSTEM_UI_FLAG_FULLSCREEN</code>等Flag，所以需要通过<code>setSystemUiVisibilityListener</code>、<code>onWindowFocudChanged</code>等方法控制应用的状态。</li>
<li>魅族MX2，Flyme 3.5系统，Android 4.4.4，Immersive模式无法退出，不过这个机型有实体按键，所以影响不大，无法从顶部下拉或底部滑动退出全屏，因为Flyme系统本身就支持在全屏时拉出状态栏或调出任务切换，系统设置中也可以关闭这个功能。</li>
</ol>
<p>参考：<a href="https://www.youtube.com/watch?v=cBi8fjv90E4&amp;feature=youtu.be" target="_blank" rel="external">https://www.youtube.com/watch?v=cBi8fjv90E4&amp;feature=youtu.be</a></p>
]]></content>
    
    <summary type="html">
    
      全屏、LOW_PROFILE Mode，LEAN_BACK Mode，Immersive Mode，fitSystemWindows相关。
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
      <category term="Status Bar" scheme="http://www.angeldevil.me/tags/Status-Bar/"/>
    
      <category term="Navigation Bar" scheme="http://www.angeldevil.me/tags/Navigation-Bar/"/>
    
  </entry>
  
  <entry>
    <title>ClickableSpan(URLSpan)的长按处理</title>
    <link href="http://www.angeldevil.me/2014/08/27/Long-click-about-Clickable(URLSpan)/"/>
    <id>http://www.angeldevil.me/2014/08/27/Long-click-about-Clickable(URLSpan)/</id>
    <published>2014-08-27T03:31:49.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>给TextView设置了OnLongClickListener后，如果TextView中同时有ClickableSpan（一般为URLSpan），此时长按TextView，如果长按的位置在ClickableSpan上，会发现<strong>同时触发了OnLongClickListener和ClickableSpan的onClick</strong>。比如下面的代码</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> TextView tv = (TextView) findViewById(R.id.txt);</div><div class="line">String url = <span class="string">"http://www.baidu.com"</span>;</div><div class="line">URLSpan span = <span class="keyword">new</span> URLSpan(url);</div><div class="line">String content = url + <span class="string">"Test"</span>;</div><div class="line">SpannableString ss = <span class="keyword">new</span> SpannableString(content);</div><div class="line">ss.setSpan(span, <span class="number">0</span>, url.length(), Spannable.SPAN_INCLUSIVE_INCLUSIVE);</div><div class="line">tv.setText(ss);</div><div class="line">tv.setMovementMethod(LinkMovementMethod.getInstance());</div><div class="line">tv.setOnLongClickListener(<span class="keyword">new</span> OnLongClickListener() &#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Toast.makeText(getApplicationContext(), <span class="string">"OnLongClick"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当在Url上长按时，会同时弹出Toast并打开指定的网页。为什么这样？当然还要从源码中查找，看下TextView的onTouchEvent函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> action = event.getActionMasked();</div><div class="line">    <span class="keyword">if</span> (mEditor != <span class="keyword">null</span>) mEditor.onTouchEvent(event);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> superResult = <span class="keyword">super</span>.onTouchEvent(event); <span class="comment">// 1</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mEditor != <span class="keyword">null</span> &amp;&amp; mEditor.mDiscardNextActionUp &amp;&amp; action == MotionEvent.ACTION_UP) &#123;</div><div class="line">        mEditor.mDiscardNextActionUp = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> superResult;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> touchIsFinished = (action == MotionEvent.ACTION_UP) &amp;&amp;</div><div class="line">            (mEditor == <span class="keyword">null</span> || !mEditor.mIgnoreActionUpEvent) &amp;&amp; isFocused();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((mMovement != <span class="keyword">null</span> || onCheckIsTextEditor()) &amp;&amp; isEnabled()</div><div class="line">            &amp;&amp; mText <span class="keyword">instanceof</span> Spannable &amp;&amp; mLayout != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (mMovement != <span class="keyword">null</span>) &#123; <span class="comment">// 2</span></div><div class="line">            handled |= mMovement.onTouchEvent(<span class="keyword">this</span>, (Spannable) mText, event);</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">        <span class="keyword">if</span> (handled) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> superResult;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面标注的第一步中，调用<code>super.onTouchEvent</code>，会处理长按事件。在接下来的第二步中，判断<code>mMovement</code>是否等于<code>null</code>，如果不为<code>null</code>，无论第一步中返回的结果是true还是false，都会调用<code>mMovement</code>的<code>onTouchEvent</code>，Shit，问题就在这里了。而<code>LinkMovementMethod</code>的<code>onTouchEvent</code>是这样的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</div><div class="line">    link[<span class="number">0</span>].onClick(widget);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">    Selection.setSelection(buffer, buffer.getSpanStart(link[<span class="number">0</span>]), buffer.getSpanEnd(link[<span class="number">0</span>]));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>省略了次要部分，在<code>ACTION_UP</code>时就调用<code>link</code>即<code>ClickableSpan</code>的onClick了，Holy Shit。</p>
<p>问题找到了，那么怎么解决？从上面代码中看到，在进入第二步前有一个很长的<code>if</code>条件判断，破坏这个条件就行了，所以可以在<code>OnLongClickListner</code>中<code>setEnabled(false)</code>，在<code>ACTION_UP</code>中再<code>setEnabled(true)</code>，但什么时候调用<code>setEnabled(true)</code>？可以设置<code>OnTouchListener</code>，在<code>ACTION_UP</code>时post一个<code>Runnable</code>来设置，不过个人不喜欢这个方法。</p>
<p>另一个办法比较取巧，你要调用onClick就调用吧，我判断一下如果触发了长按就在onClick中什么都不做不就行了，这就要求继承<code>ClickableSpan</code>。那么判断的方法呢？最简单的方法就是通过<code>View.setTag</code>，如下所示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">tv.setOnLongClickListener(<span class="keyword">new</span> OnLongClickListener() &#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Toast.makeText(getApplicationContext(), <span class="string">"onLongClick"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        v.setTag(<span class="string">"Test"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NonLongClickableUrlSpan</span> <span class="keyword">extends</span> <span class="title">URLSpan</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NonLongClickableUrlSpan</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (widget.getTag() != <span class="keyword">null</span>) &#123;</div><div class="line">            widget.setTag(<span class="keyword">null</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.onClick(widget);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接通过tag判断，这个TextView的Tag已经用做其他用途了？没事，<code>setTag</code>还有一个重载版本：<code>setTag(int, Object)</code>。</p>
<p>主要问题已经解决了，但<em>可能</em>还会遇到一点小问题，对于URLSpan，点击时后有个背景，有时松手后这个背景并不消失，解决方法也很简单，手动让它消失就行了，在<code>onLongClick</code>中添加以下代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">tv.setOnLongClickListener(<span class="keyword">new</span> OnLongClickListener() &#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        TextView txt = (TextView) v;</div><div class="line">        Spannable span = (Spannable) txt.getText();</div><div class="line">        Selection.removeSelection(span);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<p>前面说了简单针对TextView的情况，再来看一下其他情况，比如说ListView，假设它是一个聊天信息列表，每一项包含一个头像和一个消息内容，我们可能希望给这个消息内容加个长按事件，而这个长按事件的范围不包括头像，所以不能使用<code>setOnItemLongClickListener</code>，只能给这个消息内容的布局设置<code>OnLongClickListener</code>。这时可能会遇到一个问题：</p>
<blockquote>
<p>如果消息内容中有一个TextView包含URLSpan，当长按时点击的位置在这个URLSpan上时，可能不会触发外层Layout的长按事件，这个TextView拦截了焦点。</p>
</blockquote>
<p>这时可以给这个TextView也设置一个OnLongClickListener，URLSpan的长按处理和前面讲的一样，而长按事件的处理，可以简单地调用外层Layout的<code>performLongClick()</code>方法。</p>
<p>如果这个外层布局设置了Selector Background，在长按包含URLSpan的TextView时外层Layout的背景是不会改变的，可以在这个Layout中添加<code>android:addStatesFromChildren=&quot;true&quot;</code>属性解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给TextView设置了OnLongClickListener后，如果TextView中同时有ClickableSpan（一般为URLSpan），此时长按TextView，如果长按的位置在ClickableSpan上，会发现&lt;strong&gt;同时触发了OnLongClickListener和ClickableSpan的onClick&lt;/strong&gt;。比如下面的代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android SQLite调试</title>
    <link href="http://www.angeldevil.me/2014/07/24/Android-SQLite-Debug/"/>
    <id>http://www.angeldevil.me/2014/07/24/Android-SQLite-Debug/</id>
    <published>2014-07-24T05:06:27.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>调试SQLite的神器，再也不用自己去打Log了，只需简单的几个命令。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">adb shell setprop log.tag.SQLiteLog V</div><div class="line">adb shell setprop log.tag.SQLiteStatements V</div><div class="line">adb shell stop</div><div class="line">adb shell start</div></pre></td></tr></table></figure>
<p>结果如下所示</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">V/SQLiteStatements( 4405): /data/data/[package]/databases/[db_name].db: <span class="string">"UPDATE [table_name] SET state=-1 WHERE note_id='7556'"</span></div></pre></td></tr></table></figure>
<p>想关闭Log也很简单，把上面代码中的<code>V</code>改为<code>&quot;&quot;</code>就行了</p>
<p>说明在源码<code>SQLiteDebug.java</code>中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Controls the printing of informational SQL log messages.</div><div class="line">    *</div><div class="line">    * Enable using "adb shell setprop log.tag.SQLiteLog VERBOSE".</div><div class="line">    */</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG_SQL_LOG =</div><div class="line">           Log.isLoggable(<span class="string">"SQLiteLog"</span>, Log.VERBOSE);</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Controls the printing of SQL statements as they are executed.</div><div class="line">    *</div><div class="line">    * Enable using "adb shell setprop log.tag.SQLiteStatements VERBOSE".</div><div class="line">    */</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG_SQL_STATEMENTS =</div><div class="line">           Log.isLoggable(<span class="string">"SQLiteStatements"</span>, Log.VERBOSE);</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Controls the printing of wall-clock time taken to execute SQL statements</div><div class="line">    * as they are executed.</div><div class="line">    *</div><div class="line">    * Enable using "adb shell setprop log.tag.SQLiteTime VERBOSE".</div><div class="line">    */</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG_SQL_TIME =</div><div class="line">           Log.isLoggable(<span class="string">"SQLiteTime"</span>, Log.VERBOSE);</div></pre></td></tr></table></figure>
<p>源码中说要用<code>VERBOSE</code>，而我们使用<code>V</code>确也能起作用，看下<code>isLoggable</code>的实现就知道了，<code>isLoggable</code>是native方法，实际执行的是<code>frameworks/base/core/jni/android_util_Log.cpp</code>的<code>android_util_Log_isLoggable</code>方法，<code>android_util_Log_isLoggable</code>调用同一文件内的<code>isLoggable</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">static jboolean isLoggable(const char* tag, jint level) &#123;</div><div class="line">    String8 key;</div><div class="line">    key.append(LOG_NAMESPACE);</div><div class="line">    key.append(tag);</div><div class="line"></div><div class="line">    char buf[PROPERTY_VALUE_MAX];</div><div class="line">    if (property_get(key.string(), buf, &quot;&quot;) &lt;= 0) &#123;</div><div class="line">        buf[0] = &apos;\0&apos;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int logLevel = toLevel(buf);</div><div class="line">    return logLevel &gt;= 0 &amp;&amp; level &gt;= logLevel;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>isLoggable</code>中通过<code>property_get</code>获取我们之前设定的值，然后对获取到的结果调用<code>toLevel</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">static int toLevel(const char* value)</div><div class="line">&#123;</div><div class="line">    switch (value[0]) &#123;</div><div class="line">        case &apos;V&apos;: return levels.verbose;</div><div class="line">        case &apos;D&apos;: return levels.debug;</div><div class="line">        case &apos;I&apos;: return levels.info;</div><div class="line">        case &apos;W&apos;: return levels.warn;</div><div class="line">        case &apos;E&apos;: return levels.error;</div><div class="line">        case &apos;A&apos;: return levels.assert;</div><div class="line">        case &apos;S&apos;: return -1; // SUPPRESS</div><div class="line">    &#125;</div><div class="line">    return levels.info;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>toLevel</code>只判断了值的第一个字符，所以我们之前只设置<code>V</code>也可以，其实只要是<code>V</code>开头的，后接任何字符都无所谓。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;调试SQLite的神器，再也不用自己去打Log了，只需简单的几个命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
      <category term="SQLite" scheme="http://www.angeldevil.me/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>Convert View To Bitmap</title>
    <link href="http://www.angeldevil.me/2014/07/22/Convert-View-To-Bitmap/"/>
    <id>http://www.angeldevil.me/2014/07/22/Convert-View-To-Bitmap/</id>
    <published>2014-07-22T06:17:50.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">convertViewToBitmap</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    view.destroyDrawingCache();</div><div class="line">    view.measure(View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>, View.MeasureSpec.UNSPECIFIED),</div><div class="line">    View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>, View.MeasureSpec.UNSPECIFIED));</div><div class="line">    view.layout(<span class="number">0</span>, <span class="number">0</span>, view.getMeasuredWidth(), view.getMeasuredHeight());</div><div class="line">    view.setDrawingCacheEnabled(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">return</span> view.getDrawingCache(<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>自定义ActionBar标题与菜单中的文字样式</title>
    <link href="http://www.angeldevil.me/2014/07/10/custom-actionbar-title-and-menu/"/>
    <id>http://www.angeldevil.me/2014/07/10/custom-actionbar-title-and-menu/</id>
    <published>2014-07-10T09:05:27.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义标题文字样式"><a href="#自定义标题文字样式" class="headerlink" title="自定义标题文字样式"></a>自定义标题文字样式</h1><p>标题样式是ActionBar样式的一部分，所以要先定义ActionBar的样式</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"AppBaseTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:actionBarStyle"</span>&gt;</span>@style/CustomActionBar<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在ActionBar的样式中通过<code>android:titleTextStyle</code>定义标题的样式</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"CustomActionBar"</span> <span class="attr">parent</span>=<span class="string">"@android:style/Widget.DeviceDefault.ActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:titleTextStyle"</span>&gt;</span>@style/ActionBarTitle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ActionBarTitle"</span> <span class="attr">parent</span>=<span class="string">"@android:style/TextAppearance.Holo.Large"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@android:color/holo_blue_bright<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>20sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="自定义副标题文字样式"><a href="#自定义副标题文字样式" class="headerlink" title="自定义副标题文字样式"></a>自定义副标题文字样式</h1><p>副标题样式同样是ActionBar样式的一部分，在ActionBar模式中通过<code>android:subtitleTextStyle</code>指定</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"CustomActionBar"</span> <span class="attr">parent</span>=<span class="string">"@android:style/Widget.DeviceDefault.ActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:titleTextStyle"</span>&gt;</span>@style/ActionBarTitle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:subtitleTextStyle"</span>&gt;</span>@style/ActionBarSubtitle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ActionBarSubtitle"</span> <span class="attr">parent</span>=<span class="string">"@android:style/TextAppearance.Holo.Medium"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@android:color/holo_blue_light<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>16sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="自定义菜单文字样式"><a href="#自定义菜单文字样式" class="headerlink" title="自定义菜单文字样式"></a>自定义菜单文字样式</h1><p>菜单文字的自定义直接通过Activity的Theme指定，而不是通过ActionBar的样式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;AppTheme&quot; parent=&quot;AppBaseTheme&quot;&gt;</div><div class="line">    &lt;item name=&quot;android:actionBarStyle&quot;&gt;@style/CustomActionBar&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;android:actionMenuTextAppearance&quot;&gt;@style/ActionBarTitle&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;android:actionMenuTextColor&quot;&gt;@android:color/holo_blue_light&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;style name=&quot;ActionBarMenu&quot; parent=&quot;@android:style/TextAppearance.Holo.Large&quot;&gt;</div><div class="line">    &lt;item name=&quot;android:textColor&quot;&gt;@android:color/holo_blue_light&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;android:textSize&quot;&gt;20sp&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>有一点要注意，虽然通过<code>android:actionMenuTextApperance</code>指定的是<code>TextApperance</code>，但是文字的颜色要通过<code>android:actionMenuTextColor</code>单独指定</p>
<h1 id="系统使用的默认样式"><a href="#系统使用的默认样式" class="headerlink" title="系统使用的默认样式"></a>系统使用的默认样式</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"TextAppearance.Holo.Widget.ActionBar.Title"</span></span></div><div class="line">       <span class="attr">parent</span>=<span class="string">"TextAppearance.Holo.Medium"</span>&gt;<span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>@android:dimen/action_bar_title_text_size<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"TextAppearance.Holo.Widget.ActionBar.Subtitle"</span></span></div><div class="line">      <span class="attr">parent</span>=<span class="string">"TextAppearance.Holo.Small"</span>&gt;<span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>@android:dimen/action_bar_subtitle_text_size<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"TextAppearance.Holo.Widget.ActionBar.Menu"</span></span></div><div class="line">       <span class="attr">parent</span>=<span class="string">"TextAppearance.Holo.Small"</span>&gt;<span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textStyle"</span>&gt;</span>bold<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>?android:attr/actionMenuTextColor<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textAllCaps"</span>&gt;</span>@android:bool/config_actionMenuItemAllCaps<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;自定义标题文字样式&quot;&gt;&lt;a href=&quot;#自定义标题文字样式&quot; class=&quot;headerlink&quot; title=&quot;自定义标题文字样式&quot;&gt;&lt;/a&gt;自定义标题文字样式&lt;/h1&gt;&lt;p&gt;标题样式是ActionBar样式的一部分，所以要先定义ActionBar的样式&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;AppTheme&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;parent&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;AppBaseTheme&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android:actionBarStyle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;@style/CustomActionBar&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在ActionBar的样式中通过&lt;code&gt;android:titleTextStyle&lt;/code&gt;定义标题的样式&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
      <category term="ActionBar" scheme="http://www.angeldevil.me/tags/ActionBar/"/>
    
  </entry>
  
  <entry>
    <title>《暗时间》</title>
    <link href="http://www.angeldevil.me/2014/07/10/dark-time/"/>
    <id>http://www.angeldevil.me/2014/07/10/dark-time/</id>
    <published>2014-07-10T08:50:40.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="暗时间"><a href="#暗时间" class="headerlink" title="暗时间"></a>暗时间</h1><h2 id="暗时间-1"><a href="#暗时间-1" class="headerlink" title="暗时间"></a>暗时间</h2><blockquote>
<p>如果你有一台计算机，你装了一个系统之后就整天把它搁置在那里，你觉得这台计算机被实际使用了吗？没有。因为CPU整天运行的就是空闲进程，运行空闲进程也是一天，运行大数据量计算的程序也是一天，对于CPU来说同样的一天，价值却是完全不一样的。对人也是一样。</p>
</blockquote>
<a id="more"></a>
<p><em>有时候我们会感叹，为什么有的人看他们每天吃喝玩乐样样在行，平时也没怎么努力却成绩出众，而我们却在一件事情上花费大量时间却毫无建树？</em>这就要搞清楚，所谓的<em>在一件事情上花费大量时间</em>是指什么？我们从初中甚至从小学开始学习英语，一直到大学毕业，十几年的时间，肯定不算短了，但结果呢，对很多人来说只能“呵呵”。<strong>为一件事情投入了多少的时间这个说法本身就是荒唐的，实际投入的是时间和效率的乘积</strong>。说到效率可以从两方面说起：</p>
<ol>
<li><p>碎片时间的利用<br>如果把我们的生命比作沙漏，假设每个人的生命差不多长（沙子总量相等），有的人的沙漏颈部较粗，而另一些人的沙漏颈部较细，他就能感爱到每一粒流过的沙子，就相对拥有更长的生命。在生活中会有很多的碎片时间，如上厕所，等车，所有这些时间加起来也是一个不小的数字，充分利用好这部分时间会取得不小的成果，尤其在现在这个碎片化时间严重的年代，可以很方便地用手机或其他设备获取资讯，但要注意，有些事情需要长时间集中注意力，不适合在碎片时间处理。还要注意不要累坏了眼睛，这时可以把时间用来思考而不是获取资讯，现在的资讯太多了，思考的时间太少了。曾经走路睡觉都在想一些东西，导致走路都注意不到熟人经过，现在，唉。。。</p>
</li>
<li><p>真正投入学习时的专注度<br> 我们写程序的都知道，系统的进程调度是需要开销的，我们的大脑处理事情也一样，所以有时候同时处理多件事不一定好，比如在工作时抽空浏览10分钟网页，如果再次将注意力集中到之前所做的时间上需要15分钟，那么其实我们浪费掉的时间就是25分钟而不是10分钟。有时候一些碎片时间就是要浪费掉，比如开会前，已经为会议准备了很长时间，还差5分钟会议就开始了，这5分钟用来做什么？很多人可能会去看一下邮件或浏览一下网页什么的，其实这个就很不好，刚才的准备让我们的脑子里都是会议主题相关的东西，而看网页或邮件或使大脑进行上下文切换，等要再切换回来时就麻烦了，所以还是再准备一下或休息一下的好。<br> 对于不些不需要集中注意力的事情还是可以并行进行的，不然就是浪费时间，比如看电视的同时打扫卫生。小学时经常在和人聊天的同时嗑着瓜子背着书。</p>
</li>
</ol>
<h2 id="设计你自己的进度条"><a href="#设计你自己的进度条" class="headerlink" title="设计你自己的进度条"></a>设计你自己的进度条</h2><blockquote>
<p>如果你有一些时间，不知道花在A上还是B上，不行，因为过了这段时间，这段时间就不是你的了。</p>
</blockquote>
<p>我们时常同时对多个事情感兴趣，并总在权衡到底要选择哪一个，不要一直在选择前徘徊，认真调查，然后选择一个坚持下去，也许有时候并不能很确定哪一个好，那就随便选一个去做吧，它能让你不知道如何选择，至少它应该是一个不太坏的选择。</p>
<p>人人都有很多兴趣，差别是有人的会去尝试，有的人会尝试一下后就放弃，而有的人会坚持下去，重要的不是兴趣是坚持。有时候对一件事情，我们已经坚持了很多时间仍看不到希望就会想放弃，其实很多时候不是这个事情有多么困难，而是我们害怕花费了这么长时间却一事无成。不要害怕困难，你遇到的困难，踩到的坑，总有其他人也遇到过，你并不孤单。</p>
<p>当我们在电脑上执行一个需要很长时间的操作时，如果界面上没有任何提示，我们的大脑可能想，再等下去也不一定有结果，长时间等待却没任何结果是不是成本太大？是不是显得很愚蠢，这样很可能我们就放弃等下去了。而如果有一个进度条告诉你这个动作一直在进行，很多人就会继续等下去，哪怕这个进度条是假的，和真实的进度毫无关系。所以，为你所做的事设计一个进度条，做一个Todo List，一步一步来，也许事情并没有那么困难，并不是毫无希望。</p>
<h2 id="如何有效地学习与记忆"><a href="#如何有效地学习与记忆" class="headerlink" title="如何有效地学习与记忆"></a>如何有效地学习与记忆</h2><p>你所拥有的知识并不取决于你记得多少，而在于它们能否在恰当的时候被回忆起来。（更别说对于很多知识只是看过而没有记得了）</p>
<p>我们在记忆的时候将很多线索（例如当时的场景、问题的背景，甚至所处的语言环境、空间位置）一并编码进了记忆，事后能否提取出这段记忆严重取决于线索是否丰富，以及在回忆的时候是否重现了记忆时的线索。仔细想来，以前上学的时候，经常可以按顺序背出某一单元的所有单词，前后顺序都不错，但从中抽出一个单词可能却不知道它的意思，这应该也把单词的前后关系作为了线索。</p>
<p>缺乏线索的记忆就像记忆海洋中的孤岛，虽然在那里，但是难以访问。而富含线索的记忆则是罗马，条条大路通罗马。</p>
<p>我们在人既有经验中总结知识的时候，应利用适当的抽象来得出适应范围更广的知识，另一方面，当处理新知识的时候，同样应该对新知识进行抽象，触及本质，去除不相干因素避免干扰，从而有效提取之前抽象出来的知识。</p>
<h3 id="如何从日常经验中总结知识"><a href="#如何从日常经验中总结知识" class="headerlink" title="如何从日常经验中总结知识"></a>如何从日常经验中总结知识</h3><ol>
<li>养成习惯，经常主动回顾一段时间学到的知识</li>
<li>创造回忆的机会<br> a. 经常与别人讨论，或者讲给别人听。（平时就发现，学习知识的时候想象着你是在给别人讲解可以加深理解，加速学习记忆）<br> b. 整理笔记<br> c. 书写，将一段时间学习的知识按主题“串”起来</li>
<li>“虚拟经历”别人经历过的事，人对发生在自己身人上的更印象深刻</li>
<li>抽象和推广</li>
<li>联系/比较自身经历</li>
</ol>
<h3 id="学习的习惯"><a href="#学习的习惯" class="headerlink" title="学习的习惯"></a>学习的习惯</h3><ol>
<li>看书挑剔，只看经典<br> 记得看到过一句话，如果你看书速度很慢，不能一两天看一本书的话，还是多花时时间在选书上吧，免得无意义的书浪费你大量的时间。</li>
<li>做读书笔记<br> 这个还是蛮重要的，不只是要做笔记，在读的时候就要伴随着思考，不然就只会在读的时候感觉很有意义，但读过之后却什么都不记得了，以前我就这样，所以，这本书是我第三次读了。</li>
<li>学习一项知识，必须问自己三个重要问题<br> a. 它的本质是什么<br> b. 它的第一原则是什么<br> c. 它的知识结构是怎样的</li>
</ol>
<h3 id="学习和思考的过程中常问自己的几个问题"><a href="#学习和思考的过程中常问自己的几个问题" class="headerlink" title="学习和思考的过程中常问自己的几个问题"></a>学习和思考的过程中常问自己的几个问题</h3><ol>
<li>你的问题到底是什么</li>
<li>OK，到现在为止，我到底有了什么收获呢？</li>
<li>设想自己正在将东西讲给别人听</li>
<li>设想需要讲给一个不懂的人听</li>
<li>时常反省和注意自己的思维过程</li>
<li>养成反驳自己的习惯</li>
<li>人的思维极易流于表面，自己真的理解了吗？</li>
</ol>
<h3 id="时间、效率与习惯"><a href="#时间、效率与习惯" class="headerlink" title="时间、效率与习惯"></a>时间、效率与习惯</h3><ol>
<li>学习新东西时，要趁着对它有热情的时候，一股脑把万事开头难的阶段熬过去。</li>
<li>对于重要的、难以理解的东西，要用大块的时间集中注意力去解决，也要学习利用零碎的时间学习其它知识</li>
<li>重视知识的提前积累，尤其是基础、本质的知识，越是这样的知识越需要花更多的时间来学习积累，无法临时突击。当你不知道一件事的时候，很可能还有一件事你不知道，那就是你不知道你不知道那件事，多积累基础知识，对平时使用的工具要熟悉，免得要用的时候不知道去哪找。</li>
<li>在学习一个东西之前如果有足够的疑惑感，更容易加深理解。</li>
</ol>
<h1 id="思维改变生活-逃出你的肖申克"><a href="#思维改变生活-逃出你的肖申克" class="headerlink" title="思维改变生活,逃出你的肖申克"></a>思维改变生活,逃出你的肖申克</h1><p>人都有一些思维定势，或者像《影响力》里说的，社会日益复杂，我们需要思考的越来越多，什么都去分析思考不太现实，不得不走一些捷径，就有了一些思维定式。</p>
<h2 id="关于感同身受"><a href="#关于感同身受" class="headerlink" title="关于感同身受"></a>关于感同身受</h2><p>对于别人遭受的痛苦，我们习惯会看轻，感觉没那么夸张，而自己身上的痛苦，我们会看重，还感觉自己这么痛苦别人怎么能无动于衷，除了我们自己看重了自己遭受的痛苦外，我们对于别人也是他人，别人同时看轻了我们遭受的痛苦。有些事情，真的要亲身经历才能明白，是无法感同身受的。我们经常看到的一个情况是，一个人安慰另一个人说他感同身受，因为他也曾这样，这个时候说的感同身受是因为真的受过。叔本华说，我们同情别人的痛苦，对别人的痛苦感同身受，是因为我们想象事情发生在了自己身上。要么事情真的在自己身上发生过，要么事情的痛苦真的很明显（比如知道某人得了癌症），不然我们真的很难感同身受。</p>
<p>发生在自己身上的事才记忆深刻，所以时常想象经历那样事的是自己，可以加深对故事的记忆，加强对别人的理解，更好地吸引某件事的经验教训。学会从错误中学习，并且从别人的错误中学习。</p>
<h2 id="认知失调与自我辩护"><a href="#认知失调与自我辩护" class="headerlink" title="认知失调与自我辩护"></a>认知失调与自我辩护</h2><p>如果我们在听到别人的道理之前已经有了一个心理上的倾向，那么即便别人给出一个有一定说服力的理由，我们也会竭力为自己辩护，世界这么复杂，很可能还能为自己的辩护找到理由。如果在这之前我们向别人声明过我们的观点，就更会如此，推翻自己之前的结论有时会让自己误以为别人认为自己很愚蠢，或者说像《影响力》中说的，人习惯保持一致。</p>
<p>说到自我辩护就想起了辩论比赛，虽然只有一点关联。一直以来都很反感辩论比赛，我一直认为，很少有事情是完全对立的，但辩论比赛却让为比赛的双方预设了立场，有时候明明知道对方说的是有道理的还要去反驳，明知道己方的观点有些是错误的，也必须去辩护，辩论的目的只是为了去维护自己的立场，不管它是对的还是错的，只是为了辩论而辩论，发展出白马非马的辩论也不足为奇。<em>辩论</em>这个词本身就强调了<em>辩</em>，真正探讨问题应该用<em>讨论</em>。</p>
<h2 id="认知偏差"><a href="#认知偏差" class="headerlink" title="认知偏差"></a>认知偏差</h2><p>成功者的总结并不一定是正确的，可能只是他在成功的同时碰巧做了某件事。</p>
<h2 id="视觉偏差，先验假设"><a href="#视觉偏差，先验假设" class="headerlink" title="视觉偏差，先验假设"></a>视觉偏差，先验假设</h2><p>这里的例子真心不错，推荐看一下：<a href="http://mindhacks.cn/2009/03/15/preconception-explained/" target="_blank" rel="external">http://mindhacks.cn/2009/03/15/preconception-explained/</a></p>
<p>人的大脑中有很多的先验假设，比如下面的例子生动地说明了我们在平常生活中积累的偏见有多深：</p>
<ul>
<li>问题：现在有两个孩子，张森和李梅，其中一个孩子有四个卡车玩具，你认为是谁？</li>
<li>问题：莉莉和丁丁谁将来更可能成为护士？</li>
</ul>
<p>尽管我们只拥有他们的名字，名字本身只是任意的汉字，自身并不携带信息（从一个角度来说），但就连三岁的小孩也能对这两个问题给出“靠谱”的答案。</p>
<p>为了让我们远离不好的先验假设的影响，要保持Open Mind，时常用以下两句话提醒自己：</p>
<ol>
<li>这只是一种可能，未必是唯一的可能</li>
<li>想不出其他解释不代表不存在其他解释</li>
</ol>
<h2 id="两个大脑"><a href="#两个大脑" class="headerlink" title="两个大脑"></a>两个大脑</h2><p>大脑有理性的部分（新皮层）和情绪的部分，情绪部分的大脑年代久远，而理性部分的大脑在近代才得到发展，所以情绪部分的原始大脑对我们的影响更大，经历几百万年，我们依靠原始大脑的指导生存了下来，很依赖它的指挥，当有冲突时情绪部分经常取得胜利，所以很多时候我们理性上明知某件事是不对的，却仍摆脱不了情绪的控制。</p>
<p>当人们为一件事情付出很多之后，这些既有的付出会对他们的思想产生越来越强大的影响，我们的思想被迫对自己的行为做出合理的解释（认知失调），谁也不希望自己的付出是愚蠢而错误的，为了不让自己是愚蠢和错误的，理性大脑不再是客观的代名词，而是一个唯唯喏喏为了维护自己感情的下属系统。</p>
<p>习惯之所以难以改变，是因为习惯是自我巩固的。能够改变既有习惯，依靠的不是自制力，而是知识。</p>
<h2 id="思维定势"><a href="#思维定势" class="headerlink" title="思维定势"></a>思维定势</h2><p>对于这些思维习惯与定势，理性大脑与情绪大脑之争，习惯的克服，我一直感觉，我们要做的不是尽全力克制它们（理性常常败给情绪），而是要看见它们，以一个旁观者的视角。仔细想想，我们的大脑或者说我们的思想是我们自己吗？如果是，为什么很多时候我们不能控制自己想什么，为什么不能控制停止想一个东西（此处不强调大脑或思想并不代表自己，只是为了接下来的说明），如果是，到底是理性的大脑代表了自己还是情绪的大脑，我作为一个整体怎么同时有两个思想在打架？试着想象我的大脑或思想并不代表我自己，它们只是我的孩子，敌人或朋友，我以一个旁观者的姿态看待它们的争吵，这样容易化解争吵，克服情绪与习惯。重要的不是克制，而是知识，是看见。</p>
<h1 id="遇到问题为什么应该自己动手"><a href="#遇到问题为什么应该自己动手" class="headerlink" title="遇到问题为什么应该自己动手"></a>遇到问题为什么应该自己动手</h1><p>遇到问题寻找捷径直接询问别人，短期看确实划算，省时省力，但长期看就未必了，你变得依赖别人，如果没人询问时会不知道怎么去寻找答案，而如果你自己动作寻找答案，可能会有意想不到的收获，比如为了解决一个问题，你发现了哪些网站的内容比较有价值，这个领域有哪些好书，在解决过程中发现了一些牛人，了解了其他相关问题， 这样下次再遇到相关问题时就很容易解决。困难的路越走越易，容易的路越走越难。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;暗时间&quot;&gt;&lt;a href=&quot;#暗时间&quot; class=&quot;headerlink&quot; title=&quot;暗时间&quot;&gt;&lt;/a&gt;暗时间&lt;/h1&gt;&lt;h2 id=&quot;暗时间-1&quot;&gt;&lt;a href=&quot;#暗时间-1&quot; class=&quot;headerlink&quot; title=&quot;暗时间&quot;&gt;&lt;/a&gt;暗时间&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;如果你有一台计算机，你装了一个系统之后就整天把它搁置在那里，你觉得这台计算机被实际使用了吗？没有。因为CPU整天运行的就是空闲进程，运行空闲进程也是一天，运行大数据量计算的程序也是一天，对于CPU来说同样的一天，价值却是完全不一样的。对人也是一样。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://www.angeldevil.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="思维" scheme="http://www.angeldevil.me/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>《影响力》</title>
    <link href="http://www.angeldevil.me/2014/07/10/influence/"/>
    <id>http://www.angeldevil.me/2014/07/10/influence/</id>
    <published>2014-07-10T08:47:38.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="影响力的武器"><a href="#影响力的武器" class="headerlink" title="影响力的武器"></a>影响力的武器</h1><p>火鸡照顾孩子的方式是，当小火鸡发出“吱吱”的叫声时火鸡就会去照顾小火鸡，而如果小火鸡不发出这种叫声，火鸡可能对其不管不顾。黄鼠狼是火鸡的天敌，但是如果把用录音机把小火鸡的叫声录制下来并放到黄鼠狼的身上播放，火鸡就会去照顾黄鼠狼。火鸡照顾孩子的方式就是机械式的听声音。</p>
<a id="more"></a>
<p>看起来这样的行动方式很傻，但大多数时候这样的行动方式是有效的，因为在自然环境中只有小火鸡才能发得出那样的声音。</p>
<p>我们人类这个物种拥有其他动物无法比拟的复杂的思维能力，我们建立了一个结构如此复杂、节奏如此迅速、信息如此丰富的世界，我们不得不面对很多的事情，我们不可能对每一件事情都进行分析然后再行动，所以我们开始遵从一些特定的模式来作为捷径以避免思考。尽管依赖一条孤立的信息很容易让我们做出愚蠢的决策，但是忙碌的现代生活却迫使我们要走这种捷径，比如说：</p>
<ul>
<li>当我们对物品不了解时，我们会使用“昂贵=优质”的公式来判断物品的好坏，因为我们从小被灌输的观念就是“一分价钱一分货”。如果一个物品被说成是“从XX元降价至XX元”，我们会更倾向购买，因为首先“昂贵=优质”让我们觉得这个东西是好的，然后因为说是降价会让我们觉得占到了便宜。</li>
<li>告诉别人如果不做某件事会失去什么比告诉他如果做某件事会得到同样的什么更容易说服他。</li>
<li>当看房子时，如果看过几个房子很破并且很贵，再看一个好点的房子，我们会感觉后面的房子很超值，也就不会觉得太贵了。</li>
<li>当买东西时，先展示贵的东西再展示便宜的就会感觉后面那个没那么贵，当花了大价钱比如说几万买了一个东西时，再看几百块钱的东西会感觉很便宜，而其实平时只看这个几百块钱的东西的话，我们可能会觉得太贵。</li>
<li>我们爱给我们的行动找一个理由，所以当别人有请求时，他说了“因为”的话我们会更容易同意他的请求，哪怕他“因为”后面的理由并不成立。</li>
</ul>
<p>我们总是遵从特定的行为模式，所以有一些通用的法则可以让我们变得更有影响力。</p>
<h1 id="互惠"><a href="#互惠" class="headerlink" title="互惠"></a>互惠</h1><p>互惠原理认为我们应该以相同的方式报答他人为我们所做的一切，互惠原理让我们感觉我们有责任在将来的某个时候回报我们曾经接受过的恩惠、礼物和邀请等等。</p>
<p>而且如果我们受到别人的恩惠而不回报话，在社会中就会不受欢迎，人们对受恩惠而不回报的人会心存厌恶（当然如果是能力限制那就是例外了），人们小心翼翼地避免被贴上忘恩负义的标签，内心的不安和来自社会的压力给人们造成了极大的心理负担。当我们了解了这一点之后，就不难理解为什么人们付出的回报往往比得到的恩惠多得多。匹兹堡大学所做的一项实验表明，即使人们确实有某种需要，但如果感到自己难以回报，往往尽量避免请求别人的帮助。这一点都不奇怪，很简单，因为他们宁愿遭受物质上的损失，也不愿背负心理上的重担。</p>
<p>由于担心以后可能会有其他的损失，有时候人们拒绝他人的礼物和帮助。</p>
<p>互惠的原理是如果一个人对我们采取了某种行为，我们应该用类似的行为去回报，表现形式不只为接受恩惠，另一种方式时<strong>拒绝-退让</strong>，当别人就某件事做出让步时，我们也倾向于做出让步。所以请求别人做一件事时，可以先提出大的请求，再转而提出小的请求。但是如果开始的请求太过无理的话就会起到相反的结果，因为这样会让人感觉你没有诚意，或反感你这个人。如果对一个人过多地应用这个策略，可能会让别人对你心怀怨恨和警介。</p>
<p>当推销东西时，如果别人不接受你推销的东西，可以试着让他们推荐几个他们认为可能需要你的东西的人，因为他们刚拒绝了你，因为“拒绝-退让”的原则，他们很可能会给你提供这个名单，当你再向这个名单上的人推销时，由于是他们朋友介绍的，你的推销就更可能成功。</p>
<p>拒绝-退让还有另两个效果</p>
<ol>
<li>责任。被使用“拒绝-退让”策略的人感觉他们影响了对手，让对手做出了让步，会感觉自己地最终的结果更有责任</li>
<li>满意度。感觉自己的努力让对手做出了让步，所以对结果更满意。</li>
</ol>
<p>怎么防止别人对我们应用互惠手段？全然拒绝别人的恩惠是不现实的，一种方法是看别人所给的好处是不是我们真正需要的，如果不是就不接受。二是如果断定别人的恩惠只是一种推销的手段，安然接收他的恩惠并请他离开。他们给的恩惠只是让我们有负债感，“剥夺”了我们自由选择的权利，同样应用互惠原理，我们也“剥夺”他们接收回馈的权利。</p>
<h1 id="承诺和一致"><a href="#承诺和一致" class="headerlink" title="承诺和一致"></a>承诺和一致</h1><p>人们会保持一致，保持一致可以让人们避免思考，而且也可以让人们避免思考带来的结果。</p>
<p>一旦人们主动做出了一个承诺，自我形象就会受到一致性原理的双重压力。一是来自内心的压力，它迫使我们的所作所为要与我们的形象保持一致；另一方面是来自外界的无形的压力，它要求我们要按照他人的看法来调整自己的形象。</p>
<p>知道我们声明的人越多，我们越会保持一致。如果是我们主动做出的选择而不是被强迫的，我们就更愿意保持一致。所以，想做一件事又怕坚持不下去时，尽量让更多人知道你要做这件事吧。</p>
<p>我们在没有外界压力的情况下做出选择时，便会发自内心地要对这个选择负责。教育孩子时不要拿惩罚或奖赏来让孩子做某事，要让他根据自己的判断决定怎么做，这样当他选择后就不会轻易违反自己的选择。</p>
<p>履行一个承诺所要付出的努力越多，这个承诺对许诺者的影响就越大。</p>
<h1 id="社会认同"><a href="#社会认同" class="headerlink" title="社会认同"></a>社会认同</h1><p>我们进行是非判断的标准之一就是看别人是怎么想的，尤其是当我们要决定什么是正确的行为的时候。</p>
<p>在这个社会中，我们不愿意暴露自己，因为我们心中不安，当在人群中有人遇到困难时，我们一般不会伸出援助之手，因为我们不想暴露自己地真实想法，而且我们都从众，我们以为其他人会伸出援助之手，当人数很多时，我们会缺乏判断事态紧急与否的能力，我们以为有人会提供援助，或者如果没人提供援助，我们的从众心理会发挥作用，会以为事态并不紧急，人数越多，责任感越弱，这称为多元无知。而且我们不想在人群中暴露自己，所以人少的时候会比在人群中更容易获得帮助。所以当我们遇到紧急情况时，不要向群众求救，选定一个人，发出你地求救信号。</p>
<p>我们从众，是因为心中的不安与不确定性，当我们不确定该如何做时，我们就会转向周围的人，尤其是跟自己相似的人，我们认为如果一个跟自己相像的人会这么做，那么这么做就很可能是对的。</p>
<p>当很多人都采取一致的行动而我们又不知道他们在做什么时，我们会以为他们做的是对的或应该做的，我们会以为他们掌握 一些我们不知道的信息，但是大多数情况下，人们做的都是错的，他们并不知道他们在做什么，他们也只是看到别人在做自己就也做而已。</p>
<p>以前每天报导的富士康跳楼事件也许也可以是认为是社会认同现象在起作用，媒体不懂社会认同、从众的大众心理，大肆报导跳楼事件，以为是言论自由了，其实他们也成了帮凶，人们会模仿与自己相似的人的行为，所以当有人第一个跳楼时，其他人会模仿他的行为，同样媒体报导时其他媒体也会跟风报导，如此形势愈来愈严重。</p>
<h1 id="喜好"><a href="#喜好" class="headerlink" title="喜好"></a>喜好</h1><p>获得喜好的方法：</p>
<ol>
<li>相貌（无关男女），漂亮的人更容易让别人喜欢</li>
<li>相似性，人们喜欢跟自己相近的人</li>
<li>称赞，人们爱受奉承，哪怕知道别人称赞自己只是想获得帮助而已</li>
<li>熟悉，人们会对自己熟悉的人有好感，竞争性的熟悉可能会适得其反，合作可以促进好感</li>
<li>关联，爱屋及乌，反之亦然</li>
</ol>
<p>我们对关联的运用：</p>
<p>我们都潜意识地知道关联的原理，比如当我们向别人传达消息时，对于好消息跟坏消息会采取不同的通知方式，“刚才有个电话找你，是个好消息，快去找XX问问去吧！”，如果是坏消息的话：“刚才有个电话找你，你找XX问问吧”，人们会不自觉地将好消息而不是坏消息跟自己联系在一起。</p>
<p>人们总是充满荣耀似地提起自己的城市或自己城市的名人，这样就好像自己也有了荣耀。</p>
<p>通过彰显正面的联系、掩盖负面的联系，我们试图让旁观者对我们有更高的评价，并对我们产生更多的好感。</p>
<p>自己喜欢的球队赢球时球迷高喊“我们是第一”而不是“他们是第一”，而当输球时则是“他们”输了。</p>
<p>当我们相信自己的成绩能得到认可时，我们不会去仰仗别人的光环。相反，当我们的个人威望或公开形象很低时，我们才会想到借助他人的成功来帮助自己恢复形象。那些总自豪地说他们那里谁谁很牛逼，他们学校很多高才生的人，省省吧，这样只会让别人鄙视你，你们学校很牛又怎么，你不还是和你的现在的同学考入的是同一所学校，你不还是和你现在的同事在同一家公司。你不牛逼时只能以你的城市为荣，你牛逼了你的城市以你为荣，所以总说自己的城市牛逼只能说明你不牛逼。</p>
<p>我们不应把注意力直接放在那些令我们对让人顺从的行家们产生过多好感的事情上，而是要把注意力放在自己是否对他产生了过多好感这一事实上。如果我们发现自己对这种人的喜爱已经超乎寻常，那这时我们就要采取行动保护自己了。当我们做出任何一个顺从他人的决定时，都应该把我们对请求者的感情与他提出的要求分开。</p>
<h1 id="权威"><a href="#权威" class="headerlink" title="权威"></a>权威</h1><p>人们总是服从权威人士的意思，哪怕很多时候是在我们知道他们有错误的情况下，哪怕我们不知道他们是真的权威还是只是看起来像权威。</p>
<p>伪装权威：</p>
<ol>
<li>头衔</li>
<li>衣服</li>
<li>外部标志</li>
</ol>
<p>防护权威干扰：</p>
<p>是否真是权威，权威性与当前事情的相关性，权威可获得的利益</p>
<h1 id="短缺"><a href="#短缺" class="headerlink" title="短缺"></a>短缺</h1><p>可能会失去某种东西的想法在人们的决策过程中发挥着重要作用。实际上，害怕失去某种东西的想法比希望得到同等价值东西的想法对人们的激励作用更大。</p>
<p>从某种意义上说，当一种机会变得越来越难得时，我们也就失去了一部分自由。而失去已经获得的自由是让我们深恶痛绝的事。</p>
<p>人们满足于拥有，失去拥有的东西比得到相同的东西给人带来的情感更强烈，所以通过竞争的方式可以更易于让人们采取行动。剥夺别人对某事物的所有权或行使某行为的权力也许会让他们更加坚持，所以对孩子的约束会导致反叛，想让人做一件事时可以故意反过来禁止。</p>
<p>有时候，人们的满足感并不是来自于对短缺商品的体验，而是来自于对它的占有。</p>
<p>爱一样东西的方法就是意识到你可能会失去它。 —–G.K.切斯特顿</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;影响力的武器&quot;&gt;&lt;a href=&quot;#影响力的武器&quot; class=&quot;headerlink&quot; title=&quot;影响力的武器&quot;&gt;&lt;/a&gt;影响力的武器&lt;/h1&gt;&lt;p&gt;火鸡照顾孩子的方式是，当小火鸡发出“吱吱”的叫声时火鸡就会去照顾小火鸡，而如果小火鸡不发出这种叫声，火鸡可能对其不管不顾。黄鼠狼是火鸡的天敌，但是如果把用录音机把小火鸡的叫声录制下来并放到黄鼠狼的身上播放，火鸡就会去照顾黄鼠狼。火鸡照顾孩子的方式就是机械式的听声音。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://www.angeldevil.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="思维" scheme="http://www.angeldevil.me/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Android动态改变布局</title>
    <link href="http://www.angeldevil.me/2014/07/10/dynamic-change-layout/"/>
    <id>http://www.angeldevil.me/2014/07/10/dynamic-change-layout/</id>
    <published>2014-07-10T08:39:24.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>遇到这么个需求，先看图：</p>
<p><img src="normal.png" alt="">&nbsp;&nbsp;&nbsp;&nbsp;<img src="keyboard.png" alt=""></p>
<p>其实是一个软件的登录界面，初始是第一个图的样子，当软键盘弹出后变为第二个图的样子，因为登录界面有用户名、密码、登录按钮，不这样的话软键盘弹出后会遮住登录按钮（其实之前的实现放到了ScrollView里面，监听软键盘弹出后滚动到底部，软键盘隐藏后滚动到顶部，也是可以的）。</p>
<p>最简单的方法就是多加几个冗余的View，根据软键盘的状态隐藏不需要的View，显示需要的View，但这样感觉太挫了，然后就想起了前两年研究的RelativeLayout布局，RelativeLayout中子控件的布局都是相对位置，只需要在软键盘弹出隐藏时改变应用的位置规则就行了。</p>
<p>先来看一下布局文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/root"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:padding</span>=<span class="string">"20dp"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"$&#123;packageName&#125;.$&#123;activityClass&#125;"</span> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span> &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/logo"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"150dp"</span></div><div class="line">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@drawable/ic_launcher"</span></div><div class="line">            <span class="attr">tools:ignore</span>=<span class="string">"ContentDescription"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/label"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_below</span>=<span class="string">"@id/logo"</span></div><div class="line">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span></div><div class="line">            <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"20sp"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/input"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@id/container"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"Input sth."</span></div><div class="line">        <span class="attr">tools:ignore</span>=<span class="string">"HardcodedText"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>软键盘的弹出隐藏用<code>OnGlobalLayoutListener</code>监听实现，对Activity应用<code>android:windowSoftInputMode=&quot;stateHidden|adjustResize&quot;</code>，这样开始时软键盘不显示，当软键盘弹出时布局被Resize。</p>
<p>接下来是代码，所有的代码都在这里了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> View root; <span class="comment">// 最外层布局</span></div><div class="line">    <span class="keyword">private</span> View logo; <span class="comment">// Logo图标</span></div><div class="line">    <span class="keyword">private</span> View label; <span class="comment">// Logo附近的文字</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rootBottom = Integer.MIN_VALUE;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        root = findViewById(R.id.root);</div><div class="line">        logo = findViewById(R.id.logo);</div><div class="line">        label = findViewById(R.id.label);</div><div class="line">        root.getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">new</span> OnGlobalLayoutListener() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">                Rect r = <span class="keyword">new</span> Rect();</div><div class="line">                root.getGlobalVisibleRect(r);</div><div class="line">                <span class="comment">// 进入Activity时会布局，第一次调用onGlobalLayout，先记录开始软键盘没有弹出时底部的位置</span></div><div class="line">                <span class="keyword">if</span> (rootBottom == Integer.MIN_VALUE) &#123;</div><div class="line">                    rootBottom = r.bottom;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// adjustResize，软键盘弹出后高度会变小</span></div><div class="line">                <span class="keyword">if</span> (r.bottom &lt; rootBottom) &#123;</div><div class="line">                    RelativeLayout.LayoutParams lp = (LayoutParams) logo.getLayoutParams();</div><div class="line">                    <span class="comment">// 如果Logo不是水平居中，说明是因为接下来的改变Logo大小位置导致的再次布局，忽略掉，否则无限循环</span></div><div class="line">                    <span class="keyword">if</span> (lp.getRules()[RelativeLayout.CENTER_HORIZONTAL] != <span class="number">0</span>) &#123;</div><div class="line">                        <span class="comment">// Logo显示到左上角</span></div><div class="line">                        lp.addRule(RelativeLayout.CENTER_HORIZONTAL, <span class="number">0</span>); <span class="comment">// 取消水平居中</span></div><div class="line">                        lp.addRule(RelativeLayout.ALIGN_PARENT_LEFT); <span class="comment">// 左对齐</span></div><div class="line"></div><div class="line">                        <span class="comment">// 缩小Logo为1/2</span></div><div class="line">                        <span class="keyword">int</span> height = logo.getHeight(); <span class="comment">// getMeasuredHeight()</span></div><div class="line">                        <span class="keyword">int</span> width = logo.getWidth();</div><div class="line">                        lp.width = width / <span class="number">2</span>;</div><div class="line">                        lp.height = height / <span class="number">2</span>;</div><div class="line">                        logo.setLayoutParams(lp);</div><div class="line"></div><div class="line">                        <span class="comment">// Logo下的文字</span></div><div class="line">                        RelativeLayout.LayoutParams labelParams = (LayoutParams) label.getLayoutParams();</div><div class="line">                        labelParams.addRule(RelativeLayout.CENTER_HORIZONTAL, <span class="number">0</span>); <span class="comment">// 取消水平居中</span></div><div class="line">                        labelParams.addRule(RelativeLayout.BELOW, <span class="number">0</span>); <span class="comment">// 取消显示到logo的下方</span></div><div class="line">                        labelParams.addRule(RelativeLayout.RIGHT_OF, R.id.logo); <span class="comment">// 显示到Logo的右方</span></div><div class="line">                        labelParams.addRule(RelativeLayout.CENTER_VERTICAL); <span class="comment">// 垂直居中</span></div><div class="line">                        label.setLayoutParams(labelParams);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 软键盘收起或初始化时</span></div><div class="line">                    RelativeLayout.LayoutParams lp = (LayoutParams) logo.getLayoutParams();</div><div class="line">                    <span class="comment">// 如果没有水平居中，说明是软键盘收起，否则是开始时的初始化或者因为此处if条件里的语句修改控件导致的再次布局，忽略掉，否则无限循环</span></div><div class="line">                    <span class="keyword">if</span> (lp.getRules()[RelativeLayout.CENTER_HORIZONTAL] == <span class="number">0</span>) &#123;</div><div class="line">                        <span class="comment">// 居中Logo</span></div><div class="line">                        lp.addRule(RelativeLayout.CENTER_HORIZONTAL);</div><div class="line">                        lp.addRule(RelativeLayout.ALIGN_PARENT_LEFT, <span class="number">0</span>);</div><div class="line"></div><div class="line">                        <span class="comment">// 还原Logo为原来大小</span></div><div class="line">                        <span class="keyword">int</span> height = logo.getHeight();</div><div class="line">                        <span class="keyword">int</span> width = logo.getWidth();</div><div class="line">                        lp.width = width * <span class="number">2</span>;</div><div class="line">                        lp.height = height * <span class="number">2</span>;</div><div class="line">                        logo.setLayoutParams(lp);</div><div class="line"></div><div class="line">                        <span class="comment">// Logo下的文字</span></div><div class="line">                        RelativeLayout.LayoutParams labelParams = (LayoutParams) label.getLayoutParams();</div><div class="line">                        labelParams.addRule(RelativeLayout.CENTER_HORIZONTAL); <span class="comment">// 设置水平居中</span></div><div class="line">                        labelParams.addRule(RelativeLayout.BELOW, R.id.logo); <span class="comment">// 设置显示到Logo下面</span></div><div class="line">                        labelParams.addRule(RelativeLayout.RIGHT_OF, <span class="number">0</span>); <span class="comment">// 取消显示到Logo右面</span></div><div class="line">                        labelParams.addRule(RelativeLayout.CENTER_VERTICAL, <span class="number">0</span>); <span class="comment">// 取消垂直居中</span></div><div class="line">                        label.setLayoutParams(labelParams);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当Activity启动时也会进行Layout，此时用<code>rootBottom</code>记录了初始时最外层布局底部的位置，此后当软键盘弹出时，布局被压缩，再次获取同一个View底部的位置，如果比<code>rootBottom</code>小说明软键盘弹出了，如果大于或等于<code>rootBottom</code>说明软键盘隐藏了。</p>
<p>所有的代码都在上面，也有详细注释，有两点需要注意一下：</p>
<ol>
<li>Activity启动时会进行Layout，此时会调用<code>onGlobalLayout</code>，而且一般会调用两次，这样第二次时会进入else语句，要注意过滤</li>
<li>软键盘弹出或隐藏时进入<code>onGlobalLayout</code>，此时根据需要缩放Logo的大小，并改变Logo和Label的位置，这些操作会引起再次<code>onGlobalLayout</code>，需要将之后的<code>onGlobalLayout</code>过滤掉，不然就无限循环了。</li>
</ol>
<p>可以看到上面代码中的过滤条件，以else语句中的为例，Activity启动时会进入else，此时Logo是水平居中状态，会跳过else里面的if语句，这样就处理掉了第一种情况。</p>
<p>当因为软键盘收起进入else时，Logo已经因为if语句块变为了显示在左上角，所以会进入else中的if语句，重新改变Logo为水平居中，由于修改了Logo的大小和位置，会导致再次进入<code>onGlobalLayout</code>，仍是进入else，但此时已经设置Logo为水平居中了，不会再次进入else中的if语句，这样通过一个条件判断就处理了上面提到的两点注意事项。</p>
<p><strong>关于addRule</strong></p>
<p>RelativeLayout中每一个子控件所应用的规则都是通过数组保存的，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRUE = -<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRule</span><span class="params">(<span class="keyword">int</span> verb)</span> </span>&#123;</div><div class="line">    mRules[verb] = TRUE;</div><div class="line">    mInitialRules[verb] = TRUE;</div><div class="line">    mRulesChanged = <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRule</span><span class="params">(<span class="keyword">int</span> verb, <span class="keyword">int</span> anchor)</span> </span>&#123;</div><div class="line">    mRules[verb] = anchor;</div><div class="line">    mInitialRules[verb] = anchor;</div><div class="line">    mRulesChanged = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以某一规则的索引为下标，值就是规则对应的anchor，如果是相对于另一个子控件，值就是另一个子控件的ID，如果是相对于父控件，值就是<code>TRUE</code>，即-1，如果没有应用某一规则值就是0，可以看到，<code>removeRule</code>就是把相应位置的值改为了0：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeRule</span><span class="params">(<span class="keyword">int</span> verb)</span> </span>&#123;</div><div class="line">    mRules[verb] = <span class="number">0</span>;</div><div class="line">    mInitialRules[verb] = <span class="number">0</span>;</div><div class="line">    mRulesChanged = <span class="keyword">true</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><code>removeRule</code>是<code>API 17</code>才加的方法，为了在<code>API 17</code>前也能使用，可以使用它的等价方法，像上面的例子中的一样，使用<code>addRule(verb, 0)</code>。</p>
]]></content>
    
    <summary type="html">
    
      通过RelativeLayout用代码动态改变布局
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>PackageManagerService</title>
    <link href="http://www.angeldevil.me/2014/07/03/PackageManagerService/"/>
    <id>http://www.angeldevil.me/2014/07/03/PackageManagerService/</id>
    <published>2014-07-03T09:01:33.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天在看PackageManagerService，大概看了一下PackageManagerService的启动流程与APK的安装过程，细节也没怎么看，本来想总结一下的，刚写了一点，然后发现一篇文章，感觉不错，就直接转来了，懒得再总结了。</p>
<a id="more"></a>
<p>文章地址：<a href="http://blog.csdn.net/jinzhuojun/article/details/25542011" target="_blank" rel="external">http://blog.csdn.net/jinzhuojun/article/details/25542011</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天在看PackageManagerService，大概看了一下PackageManagerService的启动流程与APK的安装过程，细节也没怎么看，本来想总结一下的，刚写了一点，然后发现一篇文章，感觉不错，就直接转来了，懒得再总结了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.angeldevil.me/tags/Android/"/>
    
      <category term="PackageManagerService" scheme="http://www.angeldevil.me/tags/PackageManagerService/"/>
    
      <category term="Android Framework" scheme="http://www.angeldevil.me/tags/Android-Framework/"/>
    
  </entry>
  
  <entry>
    <title>《如何阅读一本书》读书笔记</title>
    <link href="http://www.angeldevil.me/2014/07/01/how-to-read-a-book/"/>
    <id>http://www.angeldevil.me/2014/07/01/how-to-read-a-book/</id>
    <published>2014-07-01T01:07:06.000Z</published>
    <updated>2017-03-15T08:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这些年读了不少书，但结果也仅仅是“读”过而已，仅仅是说我读过什么什么书，但却没吸收书中的内容，读的时候感觉很有意思很有道理，但过一段时间就全忘了，包括现在说的《如何阅读一本书》，几年前就开始看这本书，但几次翻看一小部分后放弃，而所看的是什么却没什么印象了，这次算是把这本书看完了，不过怎么说呢，只能说是看完了，比以前强点，至少还有现在的这个笔记，但远达不到书中分析阅读的要求。很多时候就是这样，读书的目的仅仅是”翻完”这本书而已，只想快点看完，像完成任务一样，而不是说能理解接收多少。就暂且先记录一下吧，还有以前看过的那些书，看能不能找时间再看一下。</p>
<a id="more"></a>
<h1 id="书籍摘要"><a href="#书籍摘要" class="headerlink" title="书籍摘要"></a>书籍摘要</h1><h2 id="阅读的活力与艺术"><a href="#阅读的活力与艺术" class="headerlink" title="阅读的活力与艺术"></a>阅读的活力与艺术</h2><p>阅读的目的：</p>
<ul>
<li>为了娱乐而阅读</li>
<li>为获得资讯而阅读</li>
<li>为增进理解而阅读<ol>
<li>没有任何外力的帮助，你就是要读这本书，以一己之力来提升自我</li>
<li>对一问题和作者一开始有不相等的理解程度，并要把不相等的理解力克服到一定程度之内</li>
</ol>
</li>
</ul>
<h2 id="基础阅读"><a href="#基础阅读" class="headerlink" title="基础阅读"></a>基础阅读</h2><p>能认字，能看懂句子就行了，基本上能看书能在网上看文章的就没啥问题</p>
<h2 id="检视阅读"><a href="#检视阅读" class="headerlink" title="检视阅读"></a>检视阅读</h2><p>检视阅读的目标是在一定的时间之内，抓出一本书的重点。</p>
<p>用检视阅读读完一本书之后，无论你用了多短的时间，你都该回答得出这样的问题：这是哪一类的书，小说、历史、还是科学论文。</p>
<h3 id="有系统的略读或粗读"><a href="#有系统的略读或粗读" class="headerlink" title="有系统的略读或粗读"></a>有系统的略读或粗读</h3><ol>
<li>先看书名页，然后如果有序先看序</li>
<li>研究目录页</li>
<li>如果书中附有索引，也要检阅一下，如果发现索引中哪一条词汇很重要，至少要看一下引用到这个词目的某几页内容</li>
<li>读一下出版者的介绍，这些宣传方案可能有作者的参与，可能会将书中的主旨摘要出来</li>
<li>挑几个看来跟主题息息相关的篇章来看，如果在这些篇章的开头或结尾有摘要说明，就要仔细阅读这些说明。</li>
<li>把书打开来，东翻翻西翻翻，念个一两段，有时候连续读几页，但不要太多，不要忽略掉最后的两三页，很少有作者能拒绝这样的诱惑，而不在结尾几页将自己认为既新又重要的观点重新整理一遍</li>
</ol>
<h3 id="粗浅的阅读"><a href="#粗浅的阅读" class="headerlink" title="粗浅的阅读"></a>粗浅的阅读</h3><p>头一次面对一本难读的书的时候，先从头到属读完一遍，碰到不懂的地方不要停下来查询或思索，只注意你能理解的部分，如果一碰上困难的地方就停住，最后可能对这本书真的一无所知了。</p>
<h3 id="阅读的速度"><a href="#阅读的速度" class="headerlink" title="阅读的速度"></a>阅读的速度</h3><p>所谓阅读速度，理想上来说，不只是要能读得快，还要能用不同的速度来阅读，要知道什么时候用什么样的速度是恰当的，有些书其实是连略读都不值得的，另外一些书只需要快速读过就行了。</p>
<h3 id="逗留与倒退"><a href="#逗留与倒退" class="headerlink" title="逗留与倒退"></a>逗留与倒退</h3><p>大多数人习惯半出声阅读，也就是默认读，在阅读时经常发生逗留现象，即眼睛在移动时看不见，只有停下来时才能看见，而且经常在看过几行后倒退到前面来，这就降低了阅读速度</p>
<p>人脑是个惊人的工具，可以在“一瞥”这间掌握一个句子或段落，只要眼睛能提供足够的资讯，比如回忆，我们可以在一瞬间回顾一天发生在的事情，但要是心里出了声就慢了去了</p>
<p>手指顺着文字移动下去，眼睛跟着手移动，要注意速度，一开始速度过快影响阅读</p>
<h2 id="如何做一个自我要求的读者"><a href="#如何做一个自我要求的读者" class="headerlink" title="如何做一个自我要求的读者"></a>如何做一个自我要求的读者</h2><h3 id="要提出的四个基本问题"><a href="#要提出的四个基本问题" class="headerlink" title="要提出的四个基本问题"></a>要提出的四个基本问题</h3><ol>
<li>整体来说，这本书到底在谈些什么</li>
<li>作者细部说了什么， 怎么说的</li>
<li>这本书说得有道理吗？是全部有道理，还是部分有道理</li>
<li>这本书跟你有什么关系</li>
</ol>
<h3 id="检视阅读要回答的问题"><a href="#检视阅读要回答的问题" class="headerlink" title="检视阅读要回答的问题"></a>检视阅读要回答的问题</h3><ol>
<li>这是一本什么样的书</li>
<li>作者借着怎样的整体架构，来发展他的观点或陈述他对这个主题的理解</li>
</ol>
<p>要真正拥有一本书，必须把这本书变成你自己的一部分，而要让书成为你的一部分的最好的方法就是去写下来</p>
<p>检视阅读记笔记应该跟书的结构有关，而不是内容，至少不是细节，称为结构笔记</p>
<p>分析阅读里的笔记不再是跟结构有关，而是跟概念有关</p>
<p>主题阅读是针对一场讨论情境的笔记，由许多作者共同参与，称为辩证笔记</p>
<h3 id="阅读的习惯"><a href="#阅读的习惯" class="headerlink" title="阅读的习惯"></a>阅读的习惯</h3><p>对于规则否了解得够清楚，是能不能拥有技巧的关键，艺术跟其他有规则可循的事一样，是可以学习、动作的。由规则习得技巧，由技巧变成习惯，已经忘了规则的存在，但仍然在遵循这些规则</p>
<p>为了要忘掉单一的动作，一开始必须先分别学会每一个单一的动作，规则的多样化，意味着要养成一个习惯的的复杂度，而非表示要形成许多不同的习惯</p>
<h2 id="分析阅读"><a href="#分析阅读" class="headerlink" title="分析阅读"></a>分析阅读</h2><h3 id="第一阶段，整本书在谈的是什么，架构是怎样的"><a href="#第一阶段，整本书在谈的是什么，架构是怎样的" class="headerlink" title="第一阶段，整本书在谈的是什么，架构是怎样的"></a>第一阶段，整本书在谈的是什么，架构是怎样的</h3><ol>
<li>知道一本书的分类，光是将书籍分类到一个分类中是不够的，还要知道这个种类的书到底是在谈些什么<ol>
<li>理论性的作品是在教你这是什么，实用性的作品在教你如何去做你想要做的事，或你认为应该做的事</li>
<li>我们可能不同意作者的说法，但是我们的不同意，并不能将这类书改变为非实用的</li>
</ol>
</li>
<li>使用一个单一的句子，或最多几句话（一小段文字）来叙述整本书的内容</li>
<li>将书中重要篇章列举出来，说明它们如何按照顺序组成一个整体的架构<ol>
<li>要列出各个部分的纲要，就像是各个部分自成一个整体，各有各的整体性与复杂度</li>
<li>你的大纲是关于作品本身的纲要，而不是这本书要谈的主题的纲要</li>
</ol>
</li>
<li>找出作者要问的问题，或作者想要解决的问题</li>
</ol>
<p>你应该不只是有办法完全掌握住所有相关的问题，还要能明智地将这些问题整合出顺序来</p>
<h3 id="第二阶段，这本书的详细内容是什么"><a href="#第二阶段，这本书的详细内容是什么" class="headerlink" title="第二阶段，这本书的详细内容是什么"></a>第二阶段，这本书的详细内容是什么</h3><ol>
<li>找出重要的关键字，透过它们与作者达成共识<br>一般是那些让你头痛的字或专业词汇</li>
<li>将一本书中最重要的句子圈出来，找出其中的主旨</li>
<li>从相关文句的关联中，设法架构出一本书的基本论述，了解其前因后果，以明白作者的主张<br>如果可以，找出书中说明重要论述的段落。但是，如果这个论述并没有这样表达出来，你就要去架构出来。你要从这一段或那一段中挑选句子出来，然后整理出前后顺序的主旨，以及组成的论述</li>
<li>确定作者已经解决了哪些问题，还有哪些是未解决的，在解决的问题中，确定哪些是作者认为自己无法解决的问题</li>
</ol>
<h3 id="第三阶段，像沟通知识一样地评论一本书"><a href="#第三阶段，像沟通知识一样地评论一本书" class="headerlink" title="第三阶段，像沟通知识一样地评论一本书"></a>第三阶段，像沟通知识一样地评论一本书</h3><p>主动的阅读不会为了已经了解一本书在说些什么而停顿下来，必须能评论，提出评论，才算真正完成了这件事。</p>
<h4 id="公正地评论一本书，智慧礼节的一般规则"><a href="#公正地评论一本书，智慧礼节的一般规则" class="headerlink" title="公正地评论一本书，智慧礼节的一般规则"></a>公正地评论一本书，智慧礼节的一般规则</h4><ol>
<li>在你说出“我同意”，“我不同意”，或“我暂缓评论”之前，你一定要能肯定地说“我了解了”。<br>只能在你尽过最大努力之后，因为书而不是你自己的理由才能说“我不懂”。</li>
<li>当你不同意作者的观点时，要理性地表达自己的意见，不要无理地辩驳或争论</li>
<li>分辨知识与个人观点的不同，在作任何评断之前，找出理论基础</li>
</ol>
<h4 id="赞同或反对作者，批评观点的特别标准"><a href="#赞同或反对作者，批评观点的特别标准" class="headerlink" title="赞同或反对作者，批评观点的特别标准"></a>赞同或反对作者，批评观点的特别标准</h4><ol>
<li>证明作者的知识不足</li>
<li>证明作者的知识有错误</li>
<li>证明作者不合逻辑–推论无法令人信服<ol>
<li>缺乏连贯，结论冒出来了，却跟前面所说的理论连不起来</li>
<li>事件变化的前后不一致，也就是作者所说两件事是前后矛盾的</li>
</ol>
</li>
<li>证明作者的分析与理由是不够完整</li>
</ol>
<p>一个读者所能说的第一件事是他读懂了，或是他没读懂。事实上，他必须先说自己懂了，这样才能说更多的话。如果他没懂，就应该心平气和地回头重新研究这本书。也有可能“我没懂”本身就是一个评论，但下这个评论之前，必须有理论支持才行，如果问题在书而不在读者自己，要找出问题点在哪。</p>
<p>只有当双方都了解对方所说的内容时，关于事实或方向的议题–关于一件事是什么或该如何做的议题–才是真实的。</p>
<p>要做到理想化的辩论必须满足三个条件：</p>
<ol>
<li>在争辩时要注意你会带进去的情绪，当你的情绪很强烈时，你可能会认为自己很有道理，你的争论会流于情绪化，而不是在说理了。</li>
<li>你要把自己的前提或假设摊出来，你要知道你的偏见是什么–这也是你的预先评论。否则你就不容易接受对手也有不同假设的权利。一场好的辩论是不会为假设而争吵的</li>
<li>派别之争几乎难以避免地会造成一些盲点，要化解这些盲点，应尽力尝试不偏不倚。争论而不想有派别之分是不可能的，但在争论时应该多一点理性。</li>
</ol>
<h3 id="辅助阅读"><a href="#辅助阅读" class="headerlink" title="辅助阅读"></a>辅助阅读</h3><p>辅助阅读只是一种辅助的手段，不能太多地依赖辅助工具，当更多地运行分析阅读后，你会发现你更少地需要辅助阅读</p>
<h4 id="相关经验"><a href="#相关经验" class="headerlink" title="相关经验"></a>相关经验</h4><p>怎样才能知道你是否是适当地运用自己的经验？在你觉得自己了解了的某一点上，能不能举出一个实例来。</p>
<h4 id="其他的书"><a href="#其他的书" class="headerlink" title="其他的书"></a>其他的书</h4><p>许多伟大的作品不只相互关联，而且有时间的先后顺序。</p>
<p>外在辅助阅读的主要功能在于延伸与一本书相关的内容脉络，相关的书籍能提供一个大型的网络脉络，以帮助你诠释你正在阅读的书</p>
<h4 id="导读与摘要"><a href="#导读与摘要" class="headerlink" title="导读与摘要"></a>导读与摘要</h4><p>尽量少用导读的原因：</p>
<ol>
<li>导读并不一定都是对的，可能产生误导</li>
<li>就算他们写对了，可能也不完整，阅读导读，尤其是自以为是的导读，会限制你对一书书的理解，就算你的理解是对的。</li>
</ol>
<p>内在阅读的规则是在阅读一本书之前，你要先看作者的序与前言。相反地，外在的阅读规则是除非你看完了一本书，否则不要看某个人的导读。</p>
<p>这里所说的外在阅读的规则也适用于摘录或情节摘要之类的作品。他们有且只有两种用途：</p>
<ol>
<li>如果你已经读过一本书，这些摘要能唤醒你的记忆，理想上，在分析阅读时，你自己就该作这样的摘要。</li>
<li>在主题阅读时，摘要的用处很大，你可以因此知道某些特定的议题是与你的主题密切相关的。</li>
</ol>
<p>摘要绝不能代替真正的阅读，但有时却有告诉你，你想不想或需不需要读这本书。</p>
<h4 id="工具书"><a href="#工具书" class="headerlink" title="工具书"></a>工具书</h4><ol>
<li>要善用工具书，首先你必须有一些想法，不管是多模糊的想法，那就是你想要知道些什么？</li>
<li>其次，你一定要知道在哪里找到你要找的答案，你要知道自己问的是哪一类的问题，要找哪一类的工具书。</li>
<li>你还要知道你要读的工具书是怎么组织的，比如你不知道字典的组织方式就没法查字典，所以要先看工具书的前言介绍等。</li>
</ol>
<h2 id="阅读不同读物的方法"><a href="#阅读不同读物的方法" class="headerlink" title="阅读不同读物的方法"></a>阅读不同读物的方法</h2><p>略</p>
<h2 id="主题阅读"><a href="#主题阅读" class="headerlink" title="主题阅读"></a>主题阅读</h2><p>虽然主题阅读被定义为就同一主题，阅读两种以上的书，意思也是指在阅读开始之前，这个主题就已经被确认了，但是换个角度说，这个主题也是跟着阅读走的，而不是事前就能定出来的，在读的过程中可能发现读过的一半的书是跟主题无关的，也可能在读的过程中发现了其他的问题。</p>
<p>在主题阅读中检视阅读扮演很重要的角色，一是它会让你对自己想要研究的主题有个清晰的概念。二是它会简化你的书目到一个合理的程度。</p>
<p>熟练检视阅读的读者，不但能在心中将书籍分类，而且能对内容有一个粗浅地了解，也会用非常短的时间发现这本书谈的内容对他研究的主题到底重不重要，这时他可能还不清楚哪些资料才是最重要的，但是有两件事至少他已经知道其中之一。那就是他不是发现这本书必须回头再读一次以获得启发，便是知道不论这本书多有趣又多丰富，却毫无启发，因此不值得重新再读。</p>
<h3 id="主题阅读的步骤"><a href="#主题阅读的步骤" class="headerlink" title="主题阅读的步骤"></a>主题阅读的步骤</h3><ol>
<li>找到相关的章节<br>在主题阅读中，你及你关心的主题才是基本的重点，而不是你阅读的书。当你已经确定哪些书是相关的之后，先把这些书整体检视一遍，找出书中与你的主题极为相关的章节。这个步骤与前面说的为了发现一本书是否与你的主题相关有些相似，但你最好还是把这两个步骤分开，因为除非你已经检阅过书单上大部分的书，否则你无法完全理解这个问题。在主题阅读中，是书在服务你，而不是你在服务书。</li>
<li>带引作者与你达成共识<br>建立一组词汇，帮助我们了解所有的作者，而不是其中一两个作者，帮助我们解决我们的问题，将各个作者使用的语言翻译为我们建立的词汇，如果凑巧有一位作者使用的词汇与你使用的相同，这只是一种巧合，不要因为这样被这个作用使用的相应词汇的其他主义干扰。</li>
<li>建立起一组不偏不倚的主旨。最好的方法是先列出一些可以把我们的问题说得比较明白的问题，然后让那些作者来回答这些问题。</li>
<li>界定议题<br>如果所有作者提供的答案只有正反两面的意见，那这个问题还算简单。通过不同的答案来自各人对这个主题有不同的观点，也有很多情况是来自于对问题本身的认知不同。许多议题绕着一组互相关联密切的问题打转，就会形成一个主题，把所有争议的前后关系整理清楚，同时将相关议题整理出来。</li>
<li>分析这些讨论。把问题和议题按顺序排列，以求突显主题。比较有共通性的议题，要放在比较没有共通性的议题之前。各个议题之间的关系也要清楚地界定出来。</li>
</ol>
<h3 id="客观的必要性"><a href="#客观的必要性" class="headerlink" title="客观的必要性"></a>客观的必要性</h3><p>主题阅读的目的，并不是给阅读过程中发展出来的问题提供最终答案，也不是给这个计划开始时候的问题提供最终解答。如果这样的庆，主题阅读就不再是主题阅读，而只是讨论过程中的另一个声音，失去了疏离与客观性。主题阅读就是要能面面俱到，而自己并不预设立场。</p>
<p>理想上，要一直保持对话式的疏离与客观，要做到这一点，每当你要解读某个作家对一个议题的观点时，必须从他自己文章中引一段话来并列。</p>
<h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><p>这本书说得还不错，不过有一点感觉很难认同：对于一本实用性的书，你果你认同作者的观点，你就要按照作者说的去做。虽然作者也列举了一些例外情况，比如说一本教人做糕点的书，你看了觉得很有道理，但你不是一个糕点师，对做糕点也没兴趣，你可以认同作者的观点却不按作者说的做，但这个观点还是很难认同。在生活中，我们经常认为一些事情是不好的，但仍然选择去做，明知道某些事情是急需处理的，仍然选择拖延，对，拖延是反驳这个观点的最好论据，一件事情，我们认为是对的好的，不止应该去做而是必须去做，这样的事情我们都可以拖着不做，仅仅是认同作者的观点，又怎么要求人们去按做者说的做，也许我们只是感觉作者说的是对的，有好处，但却不值得去做，或是懒得去做。</p>
<p>书中作者说明了阅读的目的与层次，并着重说了分析阅读，给出了分析阅读的一般步骤，虽然有人说对于热爱阅读的人自己就会做书中的大部分事情，但还是有人想更好地阅读却不知道怎么做的。拿我们IT来说，最典型的是设计模式和重构，看这类的书时会发现书中描述的内容很多我们都接触过，只是作者比我们多走了一步，将这些常见的情境归纳了一下，将这些模式提取了出来。我们也可以说，当经验多了之后，这些书中总结的模式自然就知道了，但这些书是有必要的吗？很明显也是需要的。书中的总结将模糊的经验清晰化，将不能直接获得的经验模式化，这样那些经验不足的人就可以更便捷地获取可能需要很长时间才能获得的经验教训，对于有过这些经验的人，可能这些模式在他们脑中也只是模糊的感觉，这些书可以让他们的感觉变得清晰有条理起来。这些模式只是对经验的总结，所起的作用是方便人们获取经验，整理思路，但不可被模式化，为应用模式而应用模式。同理，《如何阅读一本书》中总结的阅读规则也一样，并不是没有必要的，而书中列举的阅读步骤，也没必要完全按照它一步步来，可以适当变通，合并某一些步骤，或针对特定的书籍省略个别的步骤。</p>
<p>关于这类的书（《如何阅读一本书》、《重构》、设计模式等）所起的作用，还有一点就是使一个人意识到某一领域知识的存在，当一个人不知道某一件事情的时候，很可能同时还有另一件事是他所不知道的，那就是他不知道他不知道这件事。这类书可以提醒你这件事、这个领域知识的存在，这样当你以后再遇到再做相关的事时，你可能就会注意到这些方面，就会做得更好。</p>
<p>在读技术相关的书时，不知道大家都是怎么读的，我一般会选择看前言，序，推荐序和目录，但是如果目录很长的话很可能就只会看每章的标题了。对于推荐序，一般都满是对书的溢美之辞，但还是有很多和书的内容相关的知识的，值得一看。对于目录，感觉还是要好好看下。一般人们总认为网上的知识零散，书中的内容系统，我们看书很多时候也是想系统地了解某一方面的知识，如果忽略目录直接内容，很可能在看的时候不了解当前讲的内容的前后关系，也可能看到后面忘记前面，导致书看完了，却仍没有理解关于这方面知识的整体框架。如果一本书系统地讲述了一个领域的知识，一般它的目录也会出色地完成对这个领域知识的概括，甚至可能仅仅浏览一遍目录，就了解了这个领域有哪些内容，这样即使不去看书的内容，也可能对这个领域有一点了解，当遇到熟读相关问题时就知道是哪方面的问题，可以怎样去寻找答案。如果在看完这本书后，再浏览一次目录，回顾一下整个知识结构，看下有什么盲点就更好了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这些年读了不少书，但结果也仅仅是“读”过而已，仅仅是说我读过什么什么书，但却没吸收书中的内容，读的时候感觉很有意思很有道理，但过一段时间就全忘了，包括现在说的《如何阅读一本书》，几年前就开始看这本书，但几次翻看一小部分后放弃，而所看的是什么却没什么印象了，这次算是把这本书看完了，不过怎么说呢，只能说是看完了，比以前强点，至少还有现在的这个笔记，但远达不到书中分析阅读的要求。很多时候就是这样，读书的目的仅仅是”翻完”这本书而已，只想快点看完，像完成任务一样，而不是说能理解接收多少。就暂且先记录一下吧，还有以前看过的那些书，看能不能找时间再看一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://www.angeldevil.me/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
